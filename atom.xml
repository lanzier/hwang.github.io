<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hwang.top</id>
    <title>Hwang&apos;s Blog</title>
    <updated>2019-11-11T03:55:25.376Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hwang.top"/>
    <link rel="self" href="https://hwang.top/atom.xml"/>
    <subtitle>欢迎来到 Hwang 的小博客 &lt;br&gt;
这显然不是什么技术博客，也不会有太多值得期待的干货。&lt;br&gt;</subtitle>
    <logo>https://hwang.top/images/avatar.png</logo>
    <icon>https://hwang.top/favicon.ico</icon>
    <rights>All rights reserved 2019, Hwang&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[划重点 ｜ 经济学，学Python 需要学哪些内容？—— 爬虫相关的必知必会的那些知识]]></title>
        <id>https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-pa-chong-xiang-guan-de-bi-zhi-bi-hui-de-na-xie-zhi-shi</id>
        <link href="https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-pa-chong-xiang-guan-de-bi-zhi-bi-hui-de-na-xie-zhi-shi">
        </link>
        <updated>2019-11-11T03:53:49.000Z</updated>
        <summary type="html"><![CDATA[<p>经济学的数据来源，一直都是以调查数据和统计数据为主，Python 这门易学易用的语言的出现拓宽了数据来源的边界。 Python  能够通过几行代码就能获取在网络中存在的各种数据，再利用前文《划重点 ｜ 经济学，学Python 需要学哪些内容？——数据分析处理 化必知必会的知识点》提到的数据处理的相关知识，能够便捷的结构化数据，为实证分析提供强有力的支持。</p>
]]></summary>
        <content type="html"><![CDATA[<p>经济学的数据来源，一直都是以调查数据和统计数据为主，Python 这门易学易用的语言的出现拓宽了数据来源的边界。 Python  能够通过几行代码就能获取在网络中存在的各种数据，再利用前文《划重点 ｜ 经济学，学Python 需要学哪些内容？——数据分析处理 化必知必会的知识点》提到的数据处理的相关知识，能够便捷的结构化数据，为实证分析提供强有力的支持。</p>
<!-- more -->
<p>利用 Python 获取网页中的信息，就是所谓的爬虫。而越来越多经济学专业的学生也被导师“要求”学习 Python 以及爬虫的技巧。那么对于经济学学生来说，学习 Python 来爬虫，到底需要学习哪些知识呢？</p>
<h2 id="1-html-了解网页的基础知道爬取的对象是什么">1. HTML ：了解网页的基础，知道爬取的对象是什么</h2>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t44ozzm4j32700fyju2.jpg" alt=""></figure>
<p>现如今，我们已经习惯了打开浏览器查看各式各样的网络内容，而浏览器中所出现的所有内容，都可以简单概括为 HTML+ CSS+Javascript，其中 HTML 用于储存网页内容，CSS 用于储存网页的样式，Javascript 负责网页的交互。所以，要获取数据，就必须要对 HTML 下手。</p>
<p>学习和了解 HTML 成为了必不可少的知识。当然，你也无需担心，抱怨“又要学一门新的语言”HTML 是一种标记型语言，所谓标记型语言就类似于：</p>
<h1> Hello HTML </h1>
<p>非常容易理解，<code>&lt;h1&gt;&lt;/h1&gt;</code>就是一个标记，标记里面的内容属于<code>h1</code>，也就是一级标题的意思。不同的标记代表不同的功能比如<code>h2</code> 就代表二级标题，<code>p</code> 就代表正文等等，浏览器根据这个标记去显示内容的样式。所以对于爬取数据来说，只要知道哪个是标记，哪个内容，并且能够找到自己需要的标记在哪个层级的标记下就可以了。</p>
<h2 id="2-浏览器的开发者界面获取网页背后的代码">2. 浏览器的开发者界面：获取网页背后的代码</h2>
<p>学会了HTML，你还需要知道，去哪里看到这些代码。所以，这时候你就需要学习如何使用浏览器的开发者模式了。</p>
<blockquote>
<p>Chrome 浏览器是比较常用的一款能够较好显示网页源码的软件，你可以在界面右上角选择更多工具，然后打开开发者工具：<br>
<img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t45fen5sj30v00u0dit.jpg" alt=""><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t45nt7j5j31820lgq5d.jpg" alt=""><br>
打开以后，你就能够看到网页的源代码了。浏览器就是根据这些代码，显示出网页的。</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t459mwl9j31iq0u0h3h.jpg" alt=""></figure>
<p>总的来说，Chrome 提供了这么几个板块的功能<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：<br>
<img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t45sfcbkj30rw0280sp.jpg" alt=""></p>
<ul>
<li>Elements: 允许我们从浏览器的角度看页面，也就是说我们可以看到chrome渲染页面所需要的的HTML、CSS和DOM(Document Object Model)对象。也就是为我们显示源码。</li>
<li>Network: 可以看到页面向服务器请求了哪些资源、资源的大小以及加载资源花费的时间，当然也能看到哪些资源不能成功加载。此外，还可以查看HTTP的请求头，返回内容等；</li>
<li>Resources: 对本地缓存（IndexedDB、Web SQL、Cookie、应用程序缓存、Web Storage）中的数据进行确认及编辑；记录了Cookie等信息，可以用于爬取一些需要登录的网址。</li>
</ul>
<p>以及我们并不常用，但是可以了解一下：</p>
<ul>
<li>Sources: 主要用来调试js；对于我们经济学学生来说，并不那么重要。</li>
<li>Timeline: 提供了加载页面时花费时间的完整分析，所有事件，从下载资源到处理Javascript，计算CSS样式等花费的时间都展示在Timeline中；</li>
<li>Profiles: 分析web应用或者页面的执行时间以及内存使用情况；</li>
<li>Audits: 分析页面加载的过程，进而提供减少页面加载时间、提升响应速度的方案；</li>
<li>Console: 显示各种警告与错误信息，并且提供了shell用来和文档、开发者工具交互。</li>
</ul>
<p>通过这个界面，你就可以获取诸如 Xpath 、Cookie 这些对于爬虫非常重要的信息，学会使用这个工具，对于爬虫来说必不可少。</p>
<h2 id="3-python-的爬虫框架">3. Python 的爬虫框架</h2>
<p>最后，就是使用爬虫框架来进行爬虫，不同框架的上手难度以及自由度个有不同，纵多的爬虫框架，用于处理不同的情况，比较常用的有：</p>
<ul>
<li>
<p>Requests 库<a href="https://requests.kennethreitz.org/en/master/">https://requests.kennethreitz.org/en/master/</a>：适合新手上手的一个爬虫框架，如果你有了一定的 Python 基础，那么先用 request 库上手一般都是没错的。</p>
</li>
<li>
<p>Beautiful Soup <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/">https://beautifulsoup.readthedocs.io/</a>：将网页变为 Soup，然后在Soup中提取HTML内信息的爬虫方案。同样比较容易学习，易于上手。</p>
</li>
<li>
<p>Scrapy<a href="https://scrapy.org/">https://scrapy.org/</a> ：他是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 比较适合结构化数据的提取。</p>
</li>
<li>
<p>Pyspider <a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a>：一个带有GUI的爬虫框架，可以在GUI上直接写 爬虫脚本。</p>
</li>
</ul>
<p>除此之外，还有许多不同类型的爬虫框架，大家可以根据自己的需求在网络上简单搜索，就能找到各种不同库的比较，届时选择自己想对能够接受的包即可。</p>
<hr>
<p>以上三部分就是爬虫中需要知道的三大块的知识了，除此之外，你可能还需要一定的网络知识，用于处理爬虫实践中的不同种类的错误。并且，爬虫是一个可以不断深入的领域，不同类型的网站又会有不同的“反爬虫”策略，为了处理这些策略可能会需要用到更多不同的知识，对于经济学专业的学生来说，继续深入可能会有些“得不偿失”了，选取那些爬虫成本更低的网站才符合效用最大化。</p>
<p>所以简单总结，爬虫需要了解HTML的基础知识，然后要学会使用 浏览器开发者模式，查看源码以及网络信息，最后就是选择一个称手的第三包来进行爬虫操作。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>参考：<a href="https://segmentfault.com/a/1190000000683599">https://segmentfault.com/a/1190000000683599</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PySide2/PyQt 在 Windows 中添加对高分屏的支持]]></title>
        <id>https://hwang.top/post/pyside2pyqt-zai-windows-zhong-tian-jia-dui-gao-fen-ping-de-zhi-chi</id>
        <link href="https://hwang.top/post/pyside2pyqt-zai-windows-zhong-tian-jia-dui-gao-fen-ping-de-zhi-chi">
        </link>
        <updated>2019-11-05T12:24:10.000Z</updated>
        <summary type="html"><![CDATA[<p>Qt 当中有一个类是 QSize，用于标识组件的尺寸，那么是不是应该能够做到自适应高分屏呢？</p>
<p>本着大胆猜测小心求证的心态，去网上看来一圈。许多教程都是让你获取当前分辨率，然后再设置界面缩放的。这么做也不是不行，但是总感觉不应该是这样的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Qt 当中有一个类是 QSize，用于标识组件的尺寸，那么是不是应该能够做到自适应高分屏呢？</p>
<p>本着大胆猜测小心求证的心态，去网上看来一圈。许多教程都是让你获取当前分辨率，然后再设置界面缩放的。这么做也不是不行，但是总感觉不应该是这样的。</p>
<!-- more -->
<p>直到在<a href="https://doc.qt.io/qtforpython/PySide2/QtCore/Qt.html?highlight=applicationattribute#PySide2.QtCore.PySide2.QtCore.Qt.ApplicationAttribute">QtCore</a>下面找到了：</p>
<table>
<thead>
<tr>
<th>Qt.AA_UseHighDpiPixmaps</th>
<th>Make <code>pixmap()</code> generate high-dpi pixmaps that can be larger than the requested size. Such pixmaps will have <code>devicePixelRatio()</code> set to a value higher than 1. After setting this attribute, application code that uses pixmap sizes in layout geometry calculations should typically divide by <code>devicePixelRatio()</code> to get device-independent layout geometry.</th>
</tr>
</thead>
<tbody>
<tr>
<td>Qt.AA_EnableHighDpiScaling</td>
<td>Enables high-DPI scaling in Qt on supported platforms (see also High DPI Displays). Supported platforms are X11, Windows and Android. Enabling makes Qt scale the main (device independent) coordinate system according to display scale factors provided by the operating system. This corresponds to setting the QT_AUTO_SCREEN_SCALE_FACTOR environment variable to 1. This attribute must be set before <a href="https://doc.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html#PySide2.QtGui.QGuiApplication"><code>QGuiApplication</code></a> is constructed. This value was added in Qt 5.6.</td>
</tr>
<tr>
<td>Qt.AA_DisableHighDpiScaling</td>
<td>Disables high-DPI scaling in Qt, exposing window system coordinates. Note that the window system may do its own scaling, so this does not guarantee that <code>devicePixelRatio()</code> will be equal to 1. In addition, scale factors set by QT_SCALE_FACTOR will not be affected. This corresponds to setting the QT_AUTO_SCREEN_SCALE_FACTOR environment variable to 0. This attribute must be set before <a href="https://doc.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html#PySide2.QtGui.QGuiApplication"><code>QGuiApplication</code></a> is constructed. This value was added in Qt 5.6.</td>
</tr>
</tbody>
</table>
<p><code>AA_</code> 前缀表示，是ApplicationAttribute。</p>
<p>其中的<code>Qt.AA_EnableHighDpiScaling</code> 里面明确写了：</p>
<blockquote>
<p>support platforms are x11, Windows , Android</p>
</blockquote>
<p>并且说明了这个设置项必须在 <code>QGuiApplication</code>创建前：</p>
<blockquote>
<p>This attribute must be set before <a href="https://doc.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html#PySide2.QtGui.QGuiApplication"><code>QGuiApplication</code></a> is constructed. This value was added in Qt 5.6.</p>
</blockquote>
<p>所以接下来就好做了，只需要一行代码即可实现对高分屏的适配：</p>
<p><code>QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)</code></p>
<p>例如：</p>
<pre><code class="language-python"># -*- coding:utf-8 -*-
import sys
from UI import styleBook
from PySide2 import QtCore
from PySide2.QtCore import Qt
from PySide2.QtWidgets import QApplication
from PySide2.QtGui import QIcon
from stqt import mainWindows

if __name__ == '__main__':
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QApplication(sys.argv)
    mainWindow = mainWindows()
    mainWindow.setWindowTitle('Single Table Query Tools')
    mainWindow.setWindowIcon(QIcon('./LOGO.ico'))
    main_qss = styleBook.get_main_style()
    mainWindow.setStyleSheet(main_qss)
    mainWindow.show()
    sys.exit(app.exec_())

</code></pre>
<p>在 app = QApplication 创建前添加即可。</p>
<h2 id="其他建议">其他建议：</h2>
<ol>
<li>推荐图标直接使用 SVG 文件，这样在拉伸中不会导致分辨率问题。</li>
<li>样式写在单独的 QSS 文件中，每一个 Widget 组件都用 <code>px</code> 标示尺寸，这样在放大缩小中都能够很好的按倍数支持。同样文字内容也用 font-size 标注，能够很好的支持。</li>
</ol>
<h2 id="one-more-thing">One More Thing</h2>
<p>这个设置在应用从高分屏切换到低分辨率的时候也能够自动适应。挺方便的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为公众号撰稿—如何精准检索我们公众号的文章]]></title>
        <id>https://hwang.top/post/wei-gong-zhong-hao-zhuan-gao-ru-he-jing-zhun-jian-suo-wo-men-gong-zhong-hao-de-wen-zhang</id>
        <link href="https://hwang.top/post/wei-gong-zhong-hao-zhuan-gao-ru-he-jing-zhun-jian-suo-wo-men-gong-zhong-hao-de-wen-zhang">
        </link>
        <updated>2019-11-03T10:14:06.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>2019.11.03<br>
为刘老师准备的一篇小教程</p>
</blockquote>
<p>在「刘西川文献阅读与写作」的运营中，我们常常在后台收到这样的留言：</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>2019.11.03<br>
为刘老师准备的一篇小教程</p>
</blockquote>
<p>在「刘西川文献阅读与写作」的运营中，我们常常在后台收到这样的留言：</p>
<!-- more -->
<p>这位读者的意图其实很明显——希望查找我们公众平台关于「实证研究」的文章。但是由于我们精力和技术有限，以及微信公众平台本身的限制，并不能实时返还相关的内容。那么如何正确的检索我们公众号的文章呢？</p>
<p>其实微信提供了定向搜索特定微信公众号推文的功能，具体操作如下：</p>
<ol>
<li>打开「刘西川文献阅读与写作」公众号，相信爱学习的你一定已经把我们置顶了（如果没有还不赶快星标我们的公众号）</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1572776107730.JPG" alt=""></figure>
<ol start="2">
<li>点击右上方 头像 按钮 ，即可查看详情</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://hwang.top/post-images/1572776120039.JPG" alt=""></figure>
<ol start="3">
<li>点击搜索按钮，即可搜索「刘西川文献阅读与写作」下的所有推文啦。</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://hwang.top/post-images/1572776127775.jpg" alt=""></figure>
<p>如下图：</p>
<figure data-type="image" tabindex="4"><img src="https://hwang.top/post-images/1572776137449.PNG" alt=""></figure>
<p>甚至是正文内出现关键字都能找到哦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[划重点 ｜ 经济学，学Python 需要学哪些内容？——数据分析处理 化必知必会的知识点]]></title>
        <id>https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-shu-ju-fen-xi-chu-li-hua-bi-zhi-bi-hui-de-zhi-shi-dian</id>
        <link href="https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-shu-ju-fen-xi-chu-li-hua-bi-zhi-bi-hui-de-zhi-shi-dian">
        </link>
        <updated>2019-11-03T10:09:29.000Z</updated>
        <summary type="html"><![CDATA[<p>也许会有专业软件工程师可以认为 Python 的火热，有些“过誉”了，但是在经济学乃至数据科学领域，Python的火热绝对是能够理解的。任何一个经济学届的「有志青年」，都应该抓住这把火。对于那些还没有上手，有准备上手的「有志青年」们，本文将为大家梳理经济学类学子，学习 Python ，在数据分析处理环节需要用到哪些内容。</p>
]]></summary>
        <content type="html"><![CDATA[<p>也许会有专业软件工程师可以认为 Python 的火热，有些“过誉”了，但是在经济学乃至数据科学领域，Python的火热绝对是能够理解的。任何一个经济学届的「有志青年」，都应该抓住这把火。对于那些还没有上手，有准备上手的「有志青年」们，本文将为大家梳理经济学类学子，学习 Python ，在数据分析处理环节需要用到哪些内容。</p>
<!-- more -->
<p>注：以下知识点主要以 Python 的第三方包为主。</p>
<blockquote>
<p>onePoint<br>
Python的第三方包：Python 具有丰富的扩展性，成千上万的第三方扩展包不断为 Python 赋能，使得其能够承载各式各样的不同需求。一般代码前几行，诸如<code>import pandas as pd</code> ，就是在导入第三方包。得益于开源免费，任何人都可以为其贡献第三包，而许多优秀的第三方包又促进更多的人使用Python，进而创造出更多的第三方包，进而形成一种良性的循环。</p>
</blockquote>
<p>经济学使用 Stata 也好，Python 也好，根本目的是为了对于数据进行分析，从而了解到隐藏在数据背后的“经济解释”。所以数据分析是学完 Python 基础的第一课，也是最重要的一课。</p>
<h3 id="1-pandas-数据操作的基石">1. Pandas ：数据操作的基石</h3>
<p><img src="http://112.17.171.130:10080/FTPshare/20191103155953fnjC.png" alt=""><br>
毫不过分的说，学好 Pandas 甚至比学好 Python 更重要。可以说，正是因为 Pandas 的好用，奠定了 Python 在数据科学地位。</p>
<p>那么，Pandas  是什么？ Pandas 是 Python 的第三方包，用于数据处理。 Python 默认的数据格式，无论是列表还是字典，都不能很好的用于操作在现实中常见的二维数据。Pandas 为此而生， Pandas 提供了一种名为 DataFrame 的数据格式，将数据储存为一个二维表的形式，再通过各种函数方法，对数据进行横向、纵向、亦或者按条件的切片来对数据进行处理，最终得到需要的数据结果。</p>
<p>Pandas 提供了快速而高效的 DataFrame 对象，用于数据操作与综合索引（索引就是用来快速查找对象的，例如快速找到标示性别的一列）。通过 Pandas 你可以轻松的读取CSV和文本文件、Microsoft Excel、SQL数据库和快速HDF 5格式的数据。并且基于各种索引与标签，你可以轻松的创建数据切片（例如一个数据里标示年纪的切片），通过大数据集筛选特定子集（例如，筛选性别为男性、年龄大于18岁的成人男性样本）。</p>
<p>总结一下，无论是基础的数据操作，还是为日后扩展，Pandas 都是极为基础，极为重要的一款第三方包。</p>
<ul>
<li>GitHub 项目地址👉：<a href="https://github.com/pandas-dev/pandas">https://github.com/pandas-dev/pandas</a></li>
<li>官方文档地址👉：<a href="https://pandas.pydata.org/pandas-docs/stable/">https://pandas.pydata.org/pandas-docs/stable/</a></li>
</ul>
<h3 id="2-numpy为python-提供强劲的运算支持">2. Numpy：为Python 提供强劲的运算支持</h3>
<p><img src="http://112.17.171.130:10080/FTPshare/20191103170116W0Ld.png" alt=""><br>
Numpy 是 Pandas 的一个依赖项（安装 Pandas 时会自动安装 Numpy），Pandas 的高效率一部分原因就是归功于 Numpy 的强大。</p>
<p>简单理解就是 Numpy 提供了一个比 Python 自带的数组运算更加快速的 Numpy数据的数据格式。当你的分析涉及到数组运算，尤其是多维的数组运算时，那你应当考虑学习使用 Numpy。同时，Numpy也提供了强大的线性代数、傅立叶变换和随机数的功能。</p>
<p>Numpy 是Python 数据处理的又一块基石，在机器学习和深度学习领域，Numpy 具有广泛的应用。所以学习 Numpy 到如何的深度，需要看你所研究的领域，是否需要用到较为高级的数学运算。</p>
<ul>
<li>官方地址👉：<a href="https://numpy.org/">https://numpy.org/</a></li>
<li>官方文档👉：<a href="https://numpy.org/doc/">https://numpy.org/doc/</a></li>
<li>如果你熟悉 Matalab，可以查看：<a href="https://numpy.org/doc/1.17/user/numpy-for-matlab-users.html?highlight=matlab">《与matlab比较》</a>，也可以对照<a href="https://www.numpy.org.cn/user/numpy_for_matlab_users.html#%E4%BB%8B%E7%BB%8D">中文翻译版</a></li>
</ul>
<h3 id="3-statsmodels-将计量搬到python上来">3. Statsmodels： 将计量搬到python上来</h3>
<p>通过 Pandas 进行数据处理，我筛选到了需要的数据，接下来我们经济学的学生需要做什么呢？当然是开始计量之旅喽！</p>
<p>那么我们还需要将数据从 Pandas 的 DataFrame 导出成 CSV，再导入到 Stata 中，进行计量运算嘛？ 大可不必，在 Python 你可以自己手写一个 OLS 函数，然后反复调用即可。(此时可能有读者冒出了大量的 「黑人问号.jpg」)</p>
<p>其实关注本公众号的读者应该已经阅读过：<a href="https://mp.weixin.qq.com/s/Sr8MRQNN5beN9MzLjnZE8Q">工具&amp;方法 | 6行代码教你用python做OLS回归 </a></p>
<figure data-type="image" tabindex="1"><img src="http://112.17.171.130:10080/FTPshare/20191103170130lVDP.png" alt=""></figure>
<p>是的 Python 当中也有计量库了：Statsmodels 。Statsmodels 是一个Python的第三方模块，他封装了许多计量模型，方便学者直接调用。所谓封装，就相当于 Stata 中一个 reg 命令，代表了最基础的 OLS 回归命令，在Statsmodels 中也有类似 reg 的语句，提供给 OLS 估计。详细的内容可以参考<a href="https://mp.weixin.qq.com/s/Sr8MRQNN5beN9MzLjnZE8Q">工具&amp;方法 | 6行代码教你用python做OLS回归 </a>，以及下面的官方链接。</p>
<p>不得不说，通过 Statsmodels，Python 中做计量的成本大大降低，学习 Python 对于经济学学生来说，也能做到「全栈」式的使用体验。</p>
<ul>
<li>官方地址👉： <a href="https://www.statsmodels.org/stable/index.html">https://www.statsmodels.org/stable/index.html</a></li>
<li>官方示例👉：<a href="https://www.statsmodels.org/stable/examples/index.html">https://www.statsmodels.org/stable/examples/index.html</a></li>
</ul>
<h3 id="4-sqlachemy-or-pymysql-cx_oracle-进阶操作处理-sql-数据库">4 . sqlachemy ( or pymysql、cx_oracle) ：进阶操作，处理 SQL 数据库</h3>
<figure data-type="image" tabindex="2"><img src="http://112.17.171.130:10080/FTPshare/20191103170148Ccue.png" alt=""></figure>
<p>相比于 Stata ，Python 还可以通过很容易的方式，链接到数据库中，对数据库内的数据进行操作。与经济学关系更为密切的一般是 关系型数据库，即 MySQL、Oracle 为代表的数据库类型。 Python 当中提供了极其便利的方式链接到 以上类型的数据库。通过 pymysql 能够链接到 mysql 数据库，通过 cx_oracle 能够链接到 Oracle 数据库，并且，如果你对 SQL 语句不熟悉，你可以使用 sqlachemy 一类的ORM框架的方式，跳过原生 SQL 语句，通过类似 Pandas 的筛选语句的方式来操作数据库查询，获取需要的数据子集。</p>
<p>经济学对于SQL 数据库的处理，更多时候是在总的大数据集中，筛选出自己需要子集，再进行操作。这个过程，你可以通过 sqlachemy 的方式筛选数据，也可以通过原生sql查询的方式获取数据，再将数据储存为 DataFrame 格式，利用 Pandas 进行精细化的二次处理，再通过上面提到的 Statsmodels 等第三方包进行计量处理。</p>
<ul>
<li>官方地址👉：<a href="https://www.sqlalchemy.org/">https://www.sqlalchemy.org/</a></li>
</ul>
<hr>
<p>至此，小编整理的，经济学学生需要用的数据处理相关的包已经介绍完毕了。简单总结一下，当你拿到数据是 CSV 一类格式的数据时，通过 Pandas 将文件读取为一个 DataFrame，然后对其按需求进行筛选和运算，得到自己需要的数据集。如果数据储存在 SQL 数据库中，通过Python 连接数据库，运用 ORM 框架或者 原生 SQL 语句对数据进行筛选，拿到自己需要子集后，读取到 DataFrame 中，在Pandas中再进行更加精细化的处理，得到真正需要的数据集。这些数据集，依然可以通过 Python 的Statsmodels进行计量，得到计量的结果。至此一个数据处理 Workflow 在 Python 得到完整的体现。</p>
<p>根据本文的阅读的阅读数量和点赞情况，我们会考虑基础推出数据获取（爬虫）、数据可视化的相关内容哦。</p>
<pre><code class="language-sql">做一个投票，投一下希望先做数据获取（爬虫）还是先做数据可视化
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 03]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-03</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-03">
        </link>
        <updated>2019-10-30T10:57:39.000Z</updated>
        <content type="html"><![CDATA[<h6 id="这些文章来自-hwang-的-instapaper-pocket-从-rss-微博-微信等地方看到觉得自己应该仔细看看的文章收集进-instapaper-pocket归档这些文章后才会出现这里-故而主观又缺乏时效性-很遗憾没有帮到你们">这些文章来自 Hwang 的 <s>Instapaper</s> Pocket。从 RSS、微博、微信等地方看到，觉得自己应该仔细看看的文章，收集进 <s>Instapaper</s> Pocket，归档这些文章后，才会出现这里。故而，主观又缺乏时效性。很遗憾没有帮到你们。</h6>
<p><a href="https://ift.tt/2P8gyHv">High Schools to TikTok: We’re Catching Feelings</a></p>
<blockquote>
<p>Teens love the app, and now it’s getting the stamp of approval with teacher-approved clubs. Did school just get ... fun? WINTER GARDEN, Fla.</p>
</blockquote>
<p><a href="https://ift.tt/2xuZiQi">如何在印象笔记中巧用搜索？</a></p>
<blockquote>
<p>从我用手机开始就一直在用手机记录东西，大都是标签、随记之类的，在 2012 年时候我就开始寻找能在电脑和手机上同步的软件，然后发现了 Evernote，它强大的多台设备之间完整同步功能让我非常惊喜，由此我开始关注大象。</p>
</blockquote>
<p><a href="https://ift.tt/3657skN">使用 Dropbox 同步 Klib 数据库</a></p>
<blockquote>
<p>在 Klib 实现通过 iCloud 在不同 Mac 电脑同步前，可以借助 Dropbox 等第三方工具来同步。这里以 Dropbox 为例进行介绍，假定 Dropbox 本地同步目录位于：~/Sync/Dropbox/</p>
</blockquote>
<p><a href="https://ift.tt/2PqK4Z5">狄德罗效应下，小程序被“逼”向中心化</a></p>
<blockquote>
<p>文 | 陈小江 来源 | 螳螂财经（ID:TanglangFin） 话说，一直以“去中心化”自居的微信小程序正向“中心化”靠拢。 按照张小龙在2017微信公开课Pro上的最初设想，去中心化的微信小程序是这样的：小程序在微信没有入口，没有订阅</p>
</blockquote>
<p><a href="https://ift.tt/31U7Gb5">从这 10 个应用实例开始，打造一套 Things 自动化流程</a></p>
<blockquote>
<p>最近任务管理应用 Things 为我们带来了一次重磅更新：全面支持 URL Scheme，让用户能够通过 URL Scheme 完成链接到 Things、支持强大的快捷方式以及从其他应用程序切换，也正式宣告了其在自动化领域对于 Todoist 和 OmniFocus 等<br>
<a href="https://ift.tt/2JxEhgC">创业的这三年</a></p>
</blockquote>
<blockquote>
<p>我是 16 年来北京之后开始创业的，到现在已经满满三年了，但是我与创业这件事的渊源，在更早之前就已经开始了，我记得那是 15 年初的冬天，我在大学寝室吃完一顿火锅，纵横捭阖，向室友们大骂了一通当时的许多创业者，<br>
<a href="https://ift.tt/2pnJoc9">最前线 | 苹果最贵原创剧诞生，想要复制Netflix的成功</a></p>
</blockquote>
<blockquote>
<p>当视力被剥夺，人类凭借其他感官生存，世界会变成怎样？ 这一幕即将在Apple TV+的原创剧集《看见》中上演。在这部长达10集的科幻剧集中，故事设定在600年后的未来，一种致命的病毒使地球人口减少到只有200万，同时夺走了所<br>
<a href="https://ift.tt/2JvFzIT">第四消费时代离你有多远？</a></p>
</blockquote>
<blockquote>
<p>新消费时代，许多行业都被颠覆，并且变革的速度只会越来越快，打败企业的不是别人，而是自己陈旧的思维。企业只有不断进化，才能继续生存。<br>
<a href="https://ift.tt/2WlNqOy">关于音乐早教</a><br>
一、常见的音乐早教是一个规训的过程，我们应该对此做出反抗。胎儿在子宫内可以听到母亲血液流动的声音，出生后听到的是人类的说话声、其它婴儿的哭声、以及医院环境内的各种人工音声。这三者都属于被称作「实验音乐</p>
</blockquote>
<p><a href="https://ift.tt/2MUZhjc">实行威权式法治的新加坡，如何建构自身的正当性？_文化_好奇心日报</a></p>
<blockquote>
<p>《威权式法治》 内容简介 本书指出，新加坡缔造了一种匪夷所思的威权式法治。作者展示了作为法治以及自由民主之基石的制度和程序，是通过何种方式成为了制约异己、保护当政者的工具，但同时又无损于政府在国内和国际</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STQT 查询工具 Oracle 相关记录 （2）sqlalchemy 连接 oracle 中的一些注意事项]]></title>
        <id>https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu-2sqlalchemy-lian-jie-oracle-zhong-de-yi-xie-zhu-yi-shi-xiang</id>
        <link href="https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu-2sqlalchemy-lian-jie-oracle-zhong-de-yi-xie-zhu-yi-shi-xiang">
        </link>
        <updated>2019-10-30T05:37:28.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1-sqlalchemy-需要通过-cx_oracle-连接数据库">1. sqlalchemy 需要通过 cx_Oracle 连接数据库</h2>
<p><code>pip install cx_Oracle</code> 即可安装。</p>
<h2 id="2-cx_oracle-并不能直接连接-oracle-还需要驱动">2. cx_Oracle 并不能直接连接 Oracle ，还需要驱动</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1-sqlalchemy-需要通过-cx_oracle-连接数据库">1. sqlalchemy 需要通过 cx_Oracle 连接数据库</h2>
<p><code>pip install cx_Oracle</code> 即可安装。</p>
<h2 id="2-cx_oracle-并不能直接连接-oracle-还需要驱动">2. cx_Oracle 并不能直接连接 Oracle ，还需要驱动</h2>
<!-- more -->
<p>下载驱动，注意版本号：</p>
<ol>
<li>下载地址：https://www.oracle.com/database/technologies/instant-client/downloads.html 需要下载与服务器端对应的 版本。 我这里下载的文件是：<code>instantclient-basic-windows.x64-11.2.0.4.0.zip</code></li>
<li>解压，里面是一个 <code>instantclient_11_2</code> 文件夹。比如直接放在 C 盘下。</li>
<li>添加这个文件到环境路径中 <code>C:\instantclient_11_2</code></li>
<li>重启 Python 运行一遍。</li>
</ol>
<h2 id="3-连接如果环境变量并没有解决问题">3. 连接如果环境变量并没有解决问题：</h2>
<p>尝试将 <code>.dll</code> 文件存放到 python 的 <code>Lib\site-packages</code> 路径中。</p>
<figure data-type="image" tabindex="1"><img src="http://112.17.171.130:10080/FTPshare/20191028180549WzAo.jpg" alt=""></figure>
<p>一般来说这样就可以了。</p>
<h2 id="4-一些错误记录">4. 一些错误记录</h2>
<ol>
<li>
<p>错误代码 ORA-28547，应该是 <code>oci.dll</code> 文件版本错误。</p>
</li>
<li>
<p>错误代码 ORA-03135，也可能是上面这个问题。</p>
<p>出现以上错误，优先检查数据库版本号是不是正确的，或者是不是下来 <code>basiclite</code>之类的文件。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[所学皆会有所用，一个后台运营小编辑的贺词———祝贺「刘西川阅读写作课」公众号关注人数突破 10000 人]]></title>
        <id>https://hwang.top/post/suo-xue-jie-hui-you-suo-yong-yi-ge-hou-tai-yun-ying-xiao-bian-ji-de-he-ci-zhu-he-liu-xi-chuan-yue-du-xie-zuo-ke-gong-zhong-hao-guan-zhu-ren-shu-tu-po-10000-ren</id>
        <link href="https://hwang.top/post/suo-xue-jie-hui-you-suo-yong-yi-ge-hou-tai-yun-ying-xiao-bian-ji-de-he-ci-zhu-he-liu-xi-chuan-yue-du-xie-zuo-ke-gong-zhong-hao-guan-zhu-ren-shu-tu-po-10000-ren">
        </link>
        <updated>2019-10-28T04:08:40.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文是应刘老师邀请写的。<br>
属实是太久没写了，生疏了。<br>
还好有刘老师修改，不然真是惨不忍睹了。<br>
刚写完，给女朋友改，她都破口大骂 “写的什么垃圾”。 🌚</p>
</blockquote>
<p>从零到一（万）经历了不平凡的过程，零是开始，10000是被初步的认可。祝贺“刘西川阅读写作课”微信公众号关注人数，突破10000人，完成了从零到一（万）的重要一步。二零一八年 四月，该号正式上线，开启了它的不易之旅。我也有幸参与到这个“旅程”之中，作为一名后台人员，我负责将刘西川老师的文章排布到公众号上，并制作推送给大家。各位阅读的早期文章，都是由我这个小编排版的。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文是应刘老师邀请写的。<br>
属实是太久没写了，生疏了。<br>
还好有刘老师修改，不然真是惨不忍睹了。<br>
刚写完，给女朋友改，她都破口大骂 “写的什么垃圾”。 🌚</p>
</blockquote>
<p>从零到一（万）经历了不平凡的过程，零是开始，10000是被初步的认可。祝贺“刘西川阅读写作课”微信公众号关注人数，突破10000人，完成了从零到一（万）的重要一步。二零一八年 四月，该号正式上线，开启了它的不易之旅。我也有幸参与到这个“旅程”之中，作为一名后台人员，我负责将刘西川老师的文章排布到公众号上，并制作推送给大家。各位阅读的早期文章，都是由我这个小编排版的。</p>
<!-- more -->
<p>我至今仍然非常喜欢张五常曾经举过的一个例子，他说：</p>
<p>他拿100元钱，掉在地上，为什么这个钱会掉在地上，这个问题物理学能够解释，而这100块钱，为什么不见了呢？这个问题，经济学能够解释。</p>
<p>这个例子非常好的诠释了经济学的价值。我很喜欢这个“讨巧”的例子，它让我这位刚踏入大学就选择经济学专业的大学生豁然开朗：经济学居然如此有用，在自然学科群中，物理学是基础，而经济学（经济学的解释）则是社会科学中的“物理学”。我为自己能在经济学专业学习而感到高兴。在我看来，这是一种所学有用的观念，这种观念让我更加自信，也更加坚定的去汲取更多的知识。</p>
<p>我们公众号中上就曾经推送过类比物理学的经济学文章<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1572080568&amp;ver=1935&amp;signature=XNfF9b4Na6yg8syPbnHhnFp0maurfbLN12DJ6bNeqbupjQPeu8NhfvvDg3xDQA2PJgpxT9BsqPAXKqeMH6EZVguDWwAqhMFbccEh42gL7nNB1SXW2CO50o0f06fIMLbw&amp;new=1">《张五常 | 演化、逻辑与公理：经济学是社会科学中的皇后？》</a>。每次为文章排版时，我都会提前仔细阅读这些文章，这一过程也让我积累了许多写作、阅读以及社科研究相关的知识。古语曰“家中有粮，心里不慌”，积累的这些知识给我最大的底气是，当我写本科毕业论文的时候，能够有条不紊，相对比较自如，有一种拿着“答案”写“答案”的感觉。也许会有人质疑我，认为这有点夸张。但我可以肯定的告诉大家，如果不信，可以翻阅刘老师的写作课系列推文，学习论文写作每个部分的要点，必然能找到“手握答案”的感觉。除了有关社会科学范式的文章，我们还推送了一些有关引言、摘要等方面的文章。如果你还为写本科毕业论文而苦恼，那么我推荐你拜读一下这篇：<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1572080621&amp;ver=1935&amp;signature=XNfF9b4Na6yg8syPbnHhnFp0maurfbLN12DJ6bNeqbvzDHtCYl-gGz*IBaiwxdz2NBhzQqAivTbE*kjuk1zPpKc-0jwi0*MNIGl-2bCVpF7sTFvlyd8rqubY0zdcApSi&amp;new=1">《彭玉生： “洋八股”与社会科学规范 》</a>，相信你读完定会恍然大悟——天呐！社科写作原来也是有套路可寻的。</p>
<p>因为大部分推文的内容都专注于阅读与写作，这里的学与用是能够相匹配的，对论文写作的帮助也是有口皆碑。若各位老师与同学以此为目的来关注本号，必会有意想不到的收获。细心的关注者也许会发现，这个公众号以“文心雕龙”为 logo ，《文心雕龙》是一本文艺理论方面的书籍，该书作者一是反对不切实际的浮靡文风，二是主张实用的“攡文必在纬军国”之落实文风。我想，尽显真诚，力推干活，也许正是刘老师选择文新雕龙的初心吧。实用的文风其实也隐含着实用主义的价值主张。信息网络的发达亦让人们更加容易的输出内容，海量信息使得人们更加注重甄别信息，同时也更加“爱惜”自己的时间。人们总会扪心自问：看这个有用吗？或许基于实用主义追求所谓的干货，并没有什么错！我只想借助自己的例子，谈谈自己的一些认识。</p>
<p>在为刘老师运营这个公众号的过程中，为了提高自己的编辑效率，我专门学习了 CSS 的写法。很多人可能不大了解 CSS，其实它像是推文的&quot;衣服&quot;，通过学习和编辑一个文件，可以为刘老师的文章快速地套上“衣服”，排出一篇精美版式的文章。在一般人看来，作为一名经济学专业的大学生，学习这些，并没有太多益处，反而有点浪费时间。但是，谁又能想到，毕业后的我竟然真的写起了代码。我学 CSS 的经验其实也是来自于学习 stata 、撰写 do 文件。do 文件几乎是经济学学生对于 “编程”的初步认识。而往后，我以 CSS 为基础，掌握了 HTML，又学会 了Python，但如今，竟成了半个&quot;码农&quot;。这一切，谁又能想到呢 ？</p>
<p>大学，是学习效率最高，也最能够集中精力学习的时期，于我而言，多学习一些自己喜欢的知识总是没有坏处的。我相信所学皆会有所用。有时候，在很多人看来，这样的观点显得有些 阿 Q 精神。我也很难去反驳那些有用才学的“精英”的观点，而我所做的，只是真诚地分享一些自己的体会。</p>
<p>说了这么多，“腹有诗书气自华”，多多阅读好的内容，总是能够让人在任何时候提笔撰文都更加有状态。无论是社科写作，还是程序员要写的各类技术文档，“多阅读”总是“写得好”的前提。刘老师常说，“己所不欲，勿施于人”，自己都不愿意看的东西，就不要放在公众号上。我的经历与体会分享给大家，只是想说，刘老师所选所作之内容，都有其价值所在，值得我们阅读和学习。</p>
<p>最后，再次祝贺刘西川阅读写作课微信公众号，终于迈出了更坚实的一步，取得了关注者突破10000 名的可喜成绩，希望该号能够在社科领域继续发光发热，指引更多在社科领域努力的学子们前行，帮助更多对社科写作感到困惑的初学者和年轻朋友。同时，也希望“阅读写作课”能够在更广泛的领域产生更积极的影响，近期的 推文<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1572080468&amp;ver=1935&amp;signature=XNfF9b4Na6yg8syPbnHhnFp0maurfbLN12DJ6bNeqbvqPdSeao0pXSOey5PAJuBKRdsOFKizMhmkzUS15ekpHtOxToHp6TIIP*orb*tvVmTTQmazUZ8ZtjdkcFTrK9AE&amp;new=1">《会议纪要这样写，才专业！》</a>(#)推文就是一次积极的尝试。</p>
<p>😹 结尾彩蛋：</p>
<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1572235983560.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ STQT 查询工具 Oracle 相关记录]]></title>
        <id>https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu</id>
        <link href="https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu">
        </link>
        <updated>2019-10-25T09:40:11.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1571996426849.png" alt=""></figure>
<h2 id="一-sql-oracle-中的表名-字段名-字段类型等信息">一、SQL - Oracle 中的表名、字段名、字段类型等信息</h2>
<h3 id="表-all_tab_columns">表 <code>ALL_TAB_COLUMNS</code></h3>
<p>表 <code>all_tab_columns</code> 的内容包含了所有表的字段信息，可以通过查询语句获取需要的内容。</p>
<pre><code class="language-sql">SELECT * FROM ALL_TAB_COLUMNS 
</code></pre>
<p>示例：</p>
<pre><code class="language-sql">--查询某张表中的字段名，字段类型，是否为空，字段长度等信息
SELECT COLUMN_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
  FROM ALL_TAB_COLUMNS
 WHERE TABLE_NAME = 'EMPLOYEES'
 ORDER BY COLUMN_ID;
 
--查询某张表中的字段名，字段类型，是否为空，字段长度等信息
SELECT * FROM  ALL_TAB_COLUMNS WHERE TABLE_NAME = 'EMPLOYEES'
</code></pre>
<h3 id="表-user_table-用户表">表 <code>USER_TABLE</code> 用户表</h3>
<p>去除系统内的表格</p>
<pre><code class="language-sql"> SELECT * FROM USER_TABLES WHERE TABLESPACE_NAME&lt;&gt;'SYSTEM' AND TABLESPACE_NAME&lt;&gt;'SYSAUX' 
</code></pre>
<h2 id="二-权限管理记录">二、权限管理记录</h2>
<ul>
<li>自己本地使用 Docker 搭了一个 Oracle 数据库</li>
</ul>
<h3 id="授权表空间">授权表空间</h3>
<pre><code class="language-sql">alter user 用户名 quota unlimited on 表空间;
</code></pre>
<blockquote>
<p>eg:</p>
</blockquote>
<pre><code class="language-sql">ALTER USER test01 QUOTA UNLIMITED ON QY_TEST;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 mac OS 的 VS code 中配置  PySide2 的环境的注意事项]]></title>
        <id>https://hwang.top/post/zai-mac-os-de-vs-code-zhong-pei-zhi-pyside2-de-huan-jing-de-zhu-yi-shi-xiang</id>
        <link href="https://hwang.top/post/zai-mac-os-de-vs-code-zhong-pei-zhi-pyside2-de-huan-jing-de-zhu-yi-shi-xiang">
        </link>
        <updated>2019-10-23T05:55:54.000Z</updated>
        <content type="html"><![CDATA[<p>基本信息可以参考：<a href="https://blog.csdn.net/gongjianbo1992/article/details/100654638">https://blog.csdn.net/gongjianbo1992/article/details/100654638</a></p>
<p><code>pyside2-rcc</code>  : 将 资源文件专为 Python 可以用的文件<br>
<code>pyside2-uic</code> : 将 Ui 文件 专为 Python 文件</p>
<p>记录一下几个注意事项：</p>
<h2 id="1-环境变量的一些问题">1. 环境变量的一些问题：</h2>
<p>一般来说 <code>pyside2-rcc</code> 这类命令不一定会自动添加到环境变量中，所以需要添加到环境变量或者直接在设置项中选择完整的文件路径，例如我的：</p>
<pre><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.7/bin/pyside2-rcc
</code></pre>
<p>在 Vs code 中填入即可。</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g882wxli97j30xg0do0te.jpg" alt=""></figure>
<p>类似的 <code>pyside2-uic</code>  也是一样的。</p>
<p>现在 为使用的 是 zsh， 所以配置文件也是在  .zshrc 中，配置文件中一般都会有标示环境变量的。可以直接在里面添加。 如果添加成功那么 直接在终端中输入 <code>pyside2-rcc</code> 是不会报错的。</p>
<p>当然，默认直接在 <code>/usr/bin</code> 目录里面添加添加替身也是可以的。</p>
<h2 id="2-绑定-designer-软件的注意事项">2. 绑定 Designer 软件的注意事项</h2>
<p>如果使用 Ui 文件来创建用户界面，那么可能需要通过 Qt Designer 来修改文件。</p>
<p>一个 mac OS 的常识，应用程序都是以 <code>.app</code> 结尾的 「文件夹」 所以在 VScode 中添加的路径不能是一个文件夹，需要是一个可执行文件。</p>
<p>右键显示包内容，然后在 <code>/Contents/MacOS</code> 里面就能看到可执行文件了。需要添加的是这个可执行文件的路径。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 的入门「指北」]]></title>
        <id>https://hwang.top/post/docker-de-ru-men-zhi-bei</id>
        <link href="https://hwang.top/post/docker-de-ru-men-zhi-bei">
        </link>
        <updated>2019-10-07T12:21:51.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://beta.sspai.com/post/56893<br>
推荐在少数派阅读</p>
</blockquote>
<p>如果你购买过 VPS 云主机，那么或多或少，你都可能听说过 Docker。如果你从未听说过Docker，那么本文可能能够为你开启新世界。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://beta.sspai.com/post/56893<br>
推荐在少数派阅读</p>
</blockquote>
<p>如果你购买过 VPS 云主机，那么或多或少，你都可能听说过 Docker。如果你从未听说过Docker，那么本文可能能够为你开启新世界。</p>
<!-- more -->
<p>利用Docker，你能够哦非常轻松的部署各类服务，无论是个人云盘（<a href="https://sspai.com/post/55217">Nextcloud：打造属于自己的网盘服务 Docker 版(附带视频</a>）、个人的RSS服务（<a href="https://sspai.com/post/53072">利用 Docker 搭建 Tiny Tiny RSS 服务</a>）、HomeKit 桥接（<a href="https://sspai.com/post/53071">利用 Docker 搭建 HomeKit 智能家居</a>），亦或者搭建一个个人博客（<a href="https://sspai.com/post/36751">使用 Docker 部署 Ghost 教程</a>），甚至是做一个自己的维基百科、自己的社交软件，都能够轻松的实现。</p>
<p>是的，Docker 就好像是 服务器端的「应用商店」，你能够通过Docker，轻松的部署各种属于个人、团队的服务。而现如今，无论是利用各个平台的云主机，还是 树莓派、群晖、威联通等这些物理的服务器主机，甚至是自己废旧的老电脑，都能够很容易的使用上 Docker。</p>
<p>在正式开启前，本文默认读者了解基本的命令行操作，以及了解基本的Linux相关知识，如果您还不了解这些，可以通过 B站 这个 UP 主的视频有所了解：<a href="https://www.bilibili.com/video/av56233347">https://www.bilibili.com/video/av56233347</a></p>
<h2 id="那么开启-docker-之旅吧">那么开启 Docker 之旅吧！</h2>
<p>Docker 可以理解为寄存在主机上的特殊的虚拟机。它利用特殊的虚拟化技术，比一般的虚拟化技术能够更加高效合理的利用资源。一台主机上可以创建众多的容器，这些容器通过特定的方式与主机共享硬件资源，并且访问特定的文件，使用特定的端口。通过 Docker ，一台主机能够运行多种不同的服务。</p>
<h3 id="第一步安装或者启用-docker">第一步，安装或者启用 Docker</h3>
<p>一般来说，Docker 会运行在 Linux 服务器上，无论是哪种发行版本，你都可以非常容易的在搜索引擎中找到其他平台的安装方法。这里我以 Ubuntu 为例：</p>
<pre><code class="language-bash">$ sudo apt update # 先更行一下软件包缓存
$ sudo apt install docker-ce # ce 代表社区版
</code></pre>
<p>接着启动 Docker 服务</p>
<pre><code class="language-bash">$ sudo systemctl enable docker
$ sudo systemctl start docker
</code></pre>
<p>这样，你就可以尝试一下运行 <code>docker</code> 命令了</p>
<pre><code class="language-bash">$ sudo docker run hello-world
</code></pre>
<blockquote>
<p>默认情况下，docker 命令需要使用 <code>root</code> 用户或者在<code>docker</code>组下的用户才能使用（<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯）。也就是说，如果不设置，默认情况下，所有的 <code>docker</code> 命令都需要加 <code>sudo</code>。<br>
一般情况下，你可以创建一个名为  <code>docker</code> 的用户组，再将当前用户加入到 <code>docker</code> 组中，使得操作更为安全。</p>
</blockquote>
<blockquote>
<pre><code class="language-bash">$ sudo groupadd docker #创建 Docker 组。
$ sudo usermod -aG docker $USER #添加当前用户到 docker 用户组中，也可将 $USER 替换为你想加入到 docker 组中的用户。
</code></pre>
</blockquote>
<h3 id="第二步拉取你的第一个-image">第二步，拉取你的第一个 Image</h3>
<p>其实你可以这么理解 Docker，你可以在一个名为 <a href="https://hub.docker.com/">Docker Hub</a> 的网站中，查找Docker 镜像（image），这个过程就好像是在 App Store 中搜索自己需要下载的应用一样。查找完想要下载的镜像后，在终端中输入：</p>
<pre><code class="language-bash">$ docker pull [镜像名称]
</code></pre>
<p>可以拉取镜像的到本地。是的，你就下载了这个应用，只不过是在服务端。当然，一般来说这个过程会比较缓慢，你可以<a href="https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html">替换国内源</a>加速这一过程。</p>
<h3 id="第三步启动你的服务">第三步，启动你的服务</h3>
<p>与一般应用下载打开不同，Docker 的镜像可以重复的被打开成不同的容器。你可以简单的理解为这是「应用双开」，或者说是「应用多开」。我们使用 <code>docker run</code> 命令来启动容器。</p>
<p>这个启动的过程可以是一次性的启动，即直接使用 <code>docker run</code> + 一些列参数的方式启动服务，也可以通过 <code>docker compose</code> 来编排你的项目。由于 compose 会相对专业，本文就不做过多的介绍了，这里只以 <code>docker run</code> 为例作为讲解，以下是常见的参数：</p>
<ol>
<li><code>-d</code> ：正常情况下，启动一个服务区，我们都会让其在后台运行，所以使用参数 <code>-d</code> 来告诉 Docker，在后台默默奉献即可。</li>
<li><code>--name=</code> ：前面已经提到了，你可以对一个 Docker 镜像进行多开操作，所以通过 <code>dockr run -d --name=[你的名字]</code> 的方式，可以指定开启的这个容器的名称，这样在多开的情况下，能够更为方便的进行管理。</li>
<li><code>-p</code> : 指定端口的映射。</li>
</ol>
<p>这里简单讲解一下端口的含义：以用户输入在浏览器中输入<code>www.sspai.com</code> 为例，首先浏览器会通过 DNS 服务器把这个 Url 翻译为 IP 地址，再通过 IP 地址，找到少数派的服务器，再通过端口号确定开启的服务，例如如果你输入的是：<code>https:\\www.sspai.com</code>，那么对应的端口就是 443。端口号就相当于服务器的柜台，同个服务区会有多个柜台提供服务。诸如 <code>http</code> 服务，默认是 <code>80</code> 端口， <code>https</code> 默认是 <code>443</code> 端口，类似的 <code>FTP</code> 服务是 <code>21</code> 等等。 并且<strong>一个端口只能支持一个服务，就是说一个柜台只支持办理一项服务</strong>。</p>
<p>回到 <code>-p</code> 这个参数，<code>-p 8080:80</code> 就是指将 docker 中开启的端口，映射到主机的 <code>8080</code> 端口中。也就是说通过主机的IP地址的<code>8080</code> 端口，可以访问到 docker 容器的<code>80</code> 端口服务。 服务器的 <code>8080</code> 柜台接收到的服务，会发送到容器的<code>80</code>柜台中。是的，容器也相当于是一个服务器，在 Docker 内部，他们之间也是有 IP 地址的说法的，所以容器也是需要开「柜台」来管理服务的。</p>
<p>理解这一步非常重要，和一般的使用应用不同，服务器上的应用就是一直在运行，然后让你去访问的，所以 <code>-p</code> 参数设置不对，可就找不到柜台办理正确的服务器了。例如运行：</p>
<pre><code class="language-bash">$ docker run -d --name=nextcloud_demo -p 8080:80 nextcloud
</code></pre>
<p>那么你可以通过 <code>http://localhost:8080</code> 访问到你的 nextcloud 服务。这里的 <code>loaclhost</code> 指的是在 Docker 服务器上访问。如果你想通过自己的电脑，访问 Docker 服务器上的服务，把 <code>loaclhost</code> 替换为服务器的 IP 地址即可。</p>
<ol start="4">
<li><code>-v</code> ：建立主机于docker容器内的文件关联。通过<code>-v</code> 能够 主机的文件映射到 docker 容器中，例如：</li>
</ol>
<pre><code class="language-bash">$ docker run -d \
-v nextcloud:/var/www/html \
nextcloud
</code></pre>
<p>就是将本地本地文件夹 <code>nextcloud</code> 映射到容器中的 <code>/var/www/html</code> 目录。</p>
<p>这 4 个参数就是docker 最基础也是最常用的参数了。了解了这四个参数，再参照 Docker Hub 下每一个镜像的使用说明，你就可以尽情的拥抱和享受开源社区的各种服务了。</p>
<h2 id="推荐一些好用的-docker-镜像">推荐一些好用的 Docker 镜像</h2>
<p>除了开篇提到的 NextCloud、Tiny Tiny RSS、Ghost 等服务外，还有一些镜像值得尝试：</p>
<ol>
<li><a href="https://hub.docker.com/_/mediawiki">MediaWiki</a>： 和维基百科一样的属于个人或者团队的维基服务。</li>
<li><a href="https://hub.docker.com/r/wekanteam/wekan">Wekan</a>：属于个人或者团队的开源看板应用。参考Trello等服务。</li>
<li><a href="https://hub.docker.com/_/wordpress">WordPress</a>：为人所知的、被广泛使用的、收购了tumblr的博客服务，可以用来搭建个人博客，甚至商用网站。</li>
<li>gitlab、gitea 等 Git 服务：如果有团队代码管理需求，可以使用 Docker 快速部署一个私用的 Git 服务。</li>
</ol>
<h2 id="部署一时爽运维火葬厂">部署一时爽，运维「火葬厂」</h2>
<p>Docker 让服务的安装变得异常容易，但是选择一项服务后，后面的运维才是真正折腾人的地方。</p>
<p>首先是管理容器中，最常使用到：</p>
<pre><code class="language-bash">$ docker ps #查看运行中的容器。
$ docker ps -a #查看所有容器，包括停止的。
$ docker images #查看安裝的镜像
</code></pre>
<p>然后是停止、启动已有的容器：</p>
<pre><code class="language-bash">$ docker stop &lt;容器名称/ID&gt; # 正常停止容器
$ docker start &lt;容器名称/ID&gt; # 启动已有容器
$ docker kill &lt;容器名称/ID&gt; # 强制停止容器
</code></pre>
<p>一般容器运行后，会有一个 ID，用以区分容器，这个ID 一般都是乱序的，所以之前的 <code>--name</code> 参数，能够使你更加方便对容器进行管理。</p>
<p>除此之外，还有就是进入 Docker 容器中，修改一些配置文件：</p>
<pre><code class="language-bash">$ sudo docker exec -it &lt;容器名称/ID&gt; /bin/bash
</code></pre>
<p>就是说你可以通过这个命令，进入到 容器的 <code>bash</code> 中，对容器内进行一些修改。</p>
<p>最后 docker 还有许多其他的命令和方法可供学习。作为当今最受欢迎的容器化解决方案，docker 在业界发光发亮的同时，也为一般用户，「一键」启用某些服务提供了契机。利用开源社区，你可以比以往任何时候都更为容易的实现许多互联网服务的「自给自足」。</p>
]]></content>
    </entry>
</feed>