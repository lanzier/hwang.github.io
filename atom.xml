<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hwang.top</id>
    <title>Hwang&apos;s Blog</title>
    <updated>2020-04-16T08:11:11.604Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hwang.top"/>
    <link rel="self" href="https://hwang.top/atom.xml"/>
    <subtitle>欢迎来到 Hwang 的小博客 &lt;br&gt;
📚 博客通过 Gridea 搭建，感谢 Gridea 的免费服务；&lt;br&gt;
🌍 托管于 Github，感谢 Github.com 提供的服务器资源  &lt;br&gt;
✏️ 文章由 Hwang，在 Ulysses 上完成写作/亦或者拷贝&lt;br&gt;
👨‍🎨 封面由 Hwang，在 Figma 上完成创作 &lt;br&gt;
这里显然不是什么技术博客，也不会有太多值得期待的干货。</subtitle>
    <logo>https://hwang.top/images/avatar.png</logo>
    <icon>https://hwang.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Hwang&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[ Hwang Reading List - New 09]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-09/</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-09/">
        </link>
        <updated>2020-04-01T01:19:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
<p><a href="https://ift.tt/2vEEzhS">为了买一个完美的雷电 3 扩展坞，我累计花掉了一台 iPhone 11 的钱</a></p>
<blockquote>
<p>编注：本文是「少数派 2019 年度征文活动」的入围文章，本篇征文的投稿赛道为：看完就想买 。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>
</blockquote>
<p><a href="https://ift.tt/38IXNAr">AO3 事件：举报之后……谁赢了这场斗争？</a></p>
<blockquote>
<p>微信号 D-Labo 功能介绍 由《第一财经》杂志推出的一个面向年轻人的生活方式项目，团队主要设立在东京，关注建筑与设计，店铺与零售，城市与商业，媒体与文化等领域，以独立客观视角观察日本乃至全球的新鲜事，希望与你</p>
</blockquote>
<p><a href="https://ift.tt/38eMYG2">我的 2010 年代清单 | 一位设计师的十本好书</a></p>
<blockquote>
<p>编注：本文是「少数派 2019 年度征文活动」的入围文章，投稿赛道为：我的 2010 年代清单。本文仅代表作者观点，少数派对标题和排版略作调整。</p>
</blockquote>
<p><a href="https://ift.tt/31JPWAN">2019 年度总结 — 当数字生活与工作相遇</a></p>
<blockquote>
<p>编注：本文是「少数派 2019 年度征文活动」的入围文章，本篇征文的投稿赛道为：多一度思考。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>
</blockquote>
<p><a href="https://ift.tt/38oxJeH">产品配色 2.0：使用 HCL 色彩空间替代 HSL 生成配色</a></p>
<blockquote>
<p>关于 HCL HCL (Hue-Chroma-Luminance) 与 RGB 一样同属色彩空间的一种，因为最早由国际照明协会CIE提出，又被称作 CIELch(uv)。HCL 最普遍应用于程序生成的配色表 (color swatch) 或可视化数据图表配色。在 HCL 色彩空间中，当色相改变而 L 通</p>
</blockquote>
<p><a href="https://ift.tt/3b0c2T9">“网红柱状图”的前世今生</a></p>
<blockquote>
<p>微信号 pwords 功能介绍 写给100年后的考古学家 链接：https://www.bilibili.</p>
</blockquote>
<p><a href="https://ift.tt/2AeQTlw">工业 4.0 时代，“预测性维护”可以有效降低机器成本</a></p>
<blockquote>
<p>为你推送和解读最前沿、最有料的科技创投资讯</p>
</blockquote>
<p><a href="https://ift.tt/2CZCG1M">在 Node 的帮助下，横跨多平台的 JavaScript 已经赢了</a></p>
<blockquote>
<p>为你推送和解读最前沿、最有料的科技创投资讯</p>
</blockquote>
<p><a href="https://ift.tt/2qJ6t9q">看起来更“科学”的经济学模型，为什么也是一种“寓言”？_商业_好奇心日报</a></p>
<blockquote>
<p>《经济学寓言》 内容简介 这是经济学家阿里尔·鲁宾斯坦以个人视角书写的经济学普及读物。书中采用简洁又充满历史、场景感的写作手法，以及理论与现实各占一节的平行结构。在介绍经济学的重要概念时，他回忆起他的童</p>
</blockquote>
<p><a href="https://ift.tt/2rZlNzC">AirPods Pro：数字声音进化论</a></p>
<blockquote>
<p>从 4 年前开始，我尝试了市面上所有的主流蓝牙耳机。它们有着各种各样的缺陷，「不支持降噪」、「佩戴不够舒适」、「不够便携」、「通话质量不行」，我经常需要带两款以上耳机出门，以应对不同场景下的不同需求。</p>
</blockquote>
<p><a href="https://ift.tt/2U368ti">《新共和》前主编，如何看待科技巨头对独立思考的威胁？_智能_好奇心日报</a></p>
<blockquote>
<p>《没有思想的世界》 内容简介 如果思想消失了，世界将会怎样？富兰克林·福尔用亲身经历，演绎了今天的数据革命如何威胁新思想的诞生与创造性的表达。福尔指出，在三大垄断企业——亚马逊、谷歌和脸书——的控制下，</p>
</blockquote>
<p><a href="https://ift.tt/2tSupt0">在工具应用选择上，为什么我开始相信 Unix 哲学？</a></p>
<blockquote>
<p>「本文参与少数派2019年度征文 | 多一度思考」Unix 是……「独角兽」还是「日料」？ 也许很多小伙伴已经非常清楚 Unix 是什么，不过这里请允许我略提一下身边关于Unix 名称的有趣经历。 我向一些朋友提起 Unix 时，有时会产生<br>
<a href="https://ift.tt/2TPSJGk">网易游戏遭下架，脸萌又出新滤镜，10月App Store闹剧多</a> \<br>
这是产品猎人第九期 App Store 榜单报告，请各位读者查收。在数据维度和和分析深度方面，我们的报告还有待完善，请大家在评论区给我们多多提出意见，我们会不断改进，期待一起成长。</p>
</blockquote>
<p><a href="https://ift.tt/38VM95u">要像宇芽一样勇敢 | 正午</a> \</p>
<blockquote>
<p>微信号 noon-story 功能介绍 用故事凝视时代 要像宇芽一样勇敢 采访、文｜罗洁琪 11月25日，在消除对妇女的暴力行为国际日（注：是反对一切针对妇女的暴力，而不仅仅是反家暴日，这是一个误解），网红仿妆博主宇芽（真名何</p>
</blockquote>
<p><a href="https://ift.tt/35ooFo6">33 Ways to Remember the 2010s</a> \</p>
<blockquote>
<p>Try me! There’s more inside. Spandex ruled everything around us.</p>
</blockquote>
<p><a href="https://ift.tt/2O7lfQE">Stadia 体验</a> \</p>
<blockquote>
<p>今天晚上拿到了 Stadia Founder Edition 的激活码，回家装 Chrome，玩了大约十分钟的游戏。因为在别的城市实习，住的是学生公寓，网络是向当地的大学租借的，并没有无限流量可以用。用的网线连接的电脑，理论上网络带宽是 100Mb/s</p>
</blockquote>
<p><a href="https://ift.tt/2Wfqu5i">RSS二十年</a> \</p>
<blockquote>
<p>今天写一下关于RSS的理解，其实是快两年前的一句承诺，后来有个同事催了两年，干脆写一下吧。文中提到了即刻，如果有兴趣来即刻公司一起做些有趣带劲的事情，无论你是做什么的，可以发邮件到 kyth@iftech.</p>
</blockquote>
<p><a href="https://ift.tt/2IRxjSZ">Manico 2.7 更新说明（暨谈谈 App 的维护成本）</a></p>
<blockquote>
<p>今天我更新了 Manico 2.7，解决了一个在 Catalina 下无法切换至 Emacs 等多窗口 App 的问题。本来这只是一个常规的维护版本，没什么值得一提的。想到 Manico 作为一款 7 岁的 App，这么些年维护下来，也是有点感触，于是随意聊点。</p>
</blockquote>
<p><a href="https://ift.tt/340DLRm">点击进入数据新闻聊天室 | 澎湃美数课的疫情报道分享实录</a></p>
<blockquote>
<p>微信号 rendaxinwenxi 功能介绍 中国人民大学新闻学院新闻系运营的新闻采写编评及摄影业务教学与实践的平台。 3月12日晚6:30“2020特殊时期学点数据新闻”微信课程群主题澎湃美数课的疫情报道分享实录分享嘉宾　吕 妍：澎湃新</p>
</blockquote>
<p><a href="https://ift.tt/3aDk0kO">いらっしゃいませ！Figma 豆技巧专场 I</a></p>
<blockquote>
<p>各位好，本 Blog 今日开始不文艺复兴。 收听过 Anyway.</p>
</blockquote>
<p><a href="https://ift.tt/2VBdczP">想成长为优秀产品leader，这10大心法你要收好了</a></p>
<blockquote>
<p>这篇文章主要针对的人群是想要成为优秀产品leader且有着三年以上，五年以上经验的产品经理，讲述了10大关于如何成为优秀产品leader的心法，客观的分析了其中的缘由，相信这对于想成长为优秀产品leader会有所帮助。</p>
</blockquote>
<p><a href="https://ift.tt/2QXWuH4">如何通过 Github 找到一个人？</a></p>
<blockquote>
<p>很多时候，我们都需要找到一个人的联系方式。但是，并不是每一次我们都可以很好的拿到他的联系方式，这个时候，我们就需要借助一些奇技淫巧来找到一个人的联系方式。</p>
</blockquote>
<p><a href="https://ift.tt/2R1UGxA">「晒桌面」小徐的桌面 2.0 计划</a></p>
<blockquote>
<p>大学毕业后回到家乡工作，暂时还和父母一起居住，没有自己的房子可以折腾就只能照着自己的桌子下手了。于是毕业不到三年在这张小桌面上的设备已经换了好几茬了，花的钱也照着大几万去了，心疼啊😂。</p>
</blockquote>
<p><a href="https://ift.tt/2UofAZE">《龍漫少年星期天》为什么会停刊？</a></p>
<blockquote>
<p>看到这个问题真是百感交集，可以说龙漫是就是我的整个漫画编辑职业生涯。作为亲历者，在认真回答这个问题同时，也是顺便澄清一些大家误会的细节，同时对自己过去10多年工作经历做个回顾。</p>
</blockquote>
<p><a href="https://ift.tt/2X7cV4N">9 Web Components UI Libraries You Should Know in 2020</a></p>
<blockquote>
<p>When I began searching for web components libraries to compose this post, I initially thought “Where can I find a cool lit-html lib?” This is because I’ve yet to grok the full potential of web components. This is a framework/library way of thinking.</p>
</blockquote>
<p><a href="https://ift.tt/2Mk5SUV">Checkbox vs Toggle Switch</a></p>
<blockquote>
<p>Forms provide several controls that make it easier to collect input from users. Using the right control at right place is a challenge while designing forms. A checkbox control has three states: unselected, selected, and indeterminate.</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try Electron记实（十二） 在 Windows 上尝试打包]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-shi-er-zai-windows-shang-chang-shi-da-bao/</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-shi-er-zai-windows-shang-chang-shi-da-bao/">
        </link>
        <updated>2020-03-31T09:55:33.000Z</updated>
        <content type="html"><![CDATA[<p>使用 electron-builder 构建项目，所以打包同样依赖：</p>
<ol>
<li>winCodeSign；</li>
<li>nsis</li>
<li>nsis-resources<br>
这三个依赖是从 github 下载的，国内的环境并不能很好的下载，所以可以手动下载，然后手动移动到 electron-builder 中。</li>
</ol>
<p>目录：<code>C:\Users\your-user-name\AppData\Local\electron-builder\Cache\</code><br>
在该目录下创建<code>winCodeSign</code> 和 <code>nsis</code> 文件夹，把对应的内容解压进去即可。</p>
<p>大致的目录结构：<br>
<img src="https://hwang.top/post-images/1585648613243.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try Electron记实（十一） 通过 electron-release-server 部署更新服务]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-shi-yi-tong-guo-electron-release-server-bu-shu-geng-xin-fu-wu/</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-shi-yi-tong-guo-electron-release-server-bu-shu-geng-xin-fu-wu/">
        </link>
        <updated>2020-03-30T05:09:18.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>官方文档：<a href="https://www.electronjs.org/docs/tutorial/updates#deploying-an-update-server">https://www.electronjs.org/docs/tutorial/updates#deploying-an-update-server</a></li>
<li>可参考：<a href="https://juejin.im/post/5caf0e5a6fb9a0688144edae">https://juejin.im/post/5caf0e5a6fb9a0688144edae</a><br>
由于 electron 服务需要私有部署，所以选择部署 electron-release-server ：</li>
</ul>
<blockquote>
<p><a href="https://github.com/ArekSredzki/electron-release-server">electron-release-server</a> – 提供一个用于处理发布的仪表板，并且不需要在GitHub上发布发布。</p>
</blockquote>
<p>electron-release-server 提供了开箱即用的 docker 支持：</p>
<ol>
<li>克隆项目：</li>
</ol>
<pre><code class="language-js">$ git clone https://github.com/ArekSredzki/electron-release-server.git
</code></pre>
<ol start="2">
<li>在你的机器上安装 docker、docker-compose。具体可以自行参见docker的相关文档。并添加当前用户到 docker 组，然后重新登录，刷新一下组的权限。</li>
</ol>
<pre><code class="language-js">$ sudo apt install docker
$ sudo apt install docker-compose
$ sudo gpasswd -a ${USER} docker // 添加当前用户到docker组中，没有docker 组的话，可以手动创建，具体可参考文档。
</code></pre>
<ol start="3">
<li>运行 docker-compose 命令，build 容器，并启动服务。<br>
先直接启动，看看正不正常吧，然后可以修改 docker-compose.yml 内的密码信息等内容。<br>
<code>$ docker-compose up</code>如果正常，那么就会创建 docker image，并且启动服务，默认通过 <code>http://localhost:5000</code> 即可访问。</li>
</ol>
<p>当然，一般是不会那么顺利的，主要容易遇到的问题：</p>
<ol>
<li>npm 下载</li>
</ol>
<p>可以修改npm的源，在 Dockerfile 中修改，在  <code>npm install</code> 前面添加 一句，修改源的命令：</p>
<pre><code class="language-js">RUM npm config set registry https://registry.npm.taobao.org \
	&amp;&amp; npm install \
....
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ axios 的学习]]></title>
        <id>https://hwang.top/post/axios-de-xue-xi/</id>
        <link href="https://hwang.top/post/axios-de-xue-xi/">
        </link>
        <updated>2020-03-14T08:33:47.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://juejin.im/post/5c99860ce51d452db858d93d">https://juejin.im/post/5c99860ce51d452db858d93d</a></li>
<li><a href="https://juejin.im/post/5db11ad751882576063d5237">https://juejin.im/post/5db11ad751882576063d5237</a></li>
</ul>
</blockquote>
<h2 id="执行get请求">执行get请求</h2>
<h3 id="写法1">写法1</h3>
<pre><code class="language-js">axios.get('api/user?ID=xxx')
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
</code></pre>
<h3 id="写法2">写法2</h3>
<pre><code class="language-js">axios.get('api/user', {
	params: {
		ID: 'xxx'
		}
	})
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
</code></pre>
<h2 id="执-post-请求">执 post 请求</h2>
<pre><code class="language-js">axios.post('/user', {
    firstName: 'xxx',
    lastName: 'xxx'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
</code></pre>
<h2 id="基于-promise-顺序执行请求">基于 Promise 顺序执行请求：</h2>
<pre><code class="language-js">function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // 请求现在都执行完成时
  }));
</code></pre>
<h2 id="基于-config-的方式执行-post-请求">基于 Config 的方式执行 Post 请求</h2>
<pre><code class="language-js">// 发送 POST 请求
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
})
	.then(function(res) {
	console.log(res)
	});
</code></pre>
<p>一般业务中，会写在诸如<code>util.js</code> 中，方便进行调用</p>
<pre><code class="language-js">//util.js
const instance = axios.create({
	baseURL: 'http://some-domain.com/api',
	timeout: 1000,
	header: {
	'Content-Type': 'application/x-www-form-urlencoded'
	}
}) 

export default instance
</code></pre>
<p>其中，请求的配置项：</p>
<pre><code class="language-js">{
  //`url`是请求的服务器地址
  url:'/user',
  //`method`是请求资源的方式
  method:'get'//default
  //如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面
  //当`url`是相对地址的时候，设置`baseURL`会非常的方便
  baseURL:'https://some-domain.com/api/',
  //`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动
  //该选项只适用于以下请求方式：`put/post/patch`
  //数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`
  transformRequest:[function(data){
    //在这里根据自己的需求改变数据
    return data;
  }],
  //`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动
  transformResponse:[function(data){
    //在这里根据自己的需求改变数据
    return data;
  }],
  //`headers`选项是需要被发送的自定义请求头信息
  headers: {'X-Requested-With':'XMLHttpRequest'},
  //`params`选项是要随请求一起发送的请求参数----一般链接在URL后面
  //他的类型必须是一个纯对象或者是URLSearchParams对象
  params: {
    ID:12345
  },
  //`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化
  //例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)
  paramsSerializer: function(params){
    return Qs.stringify(params,{arrayFormat:'brackets'})
  },
  //`data`选项是作为一个请求体而需要被发送的数据
  //该选项只适用于方法：`put/post/patch`
  //当没有设置`transformRequest`选项时dada必须是以下几种类型之一
  //string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams
  //仅仅浏览器：FormData/File/Bold
  //仅node:Stream
  data {
    firstName:&quot;Fred&quot;
  },
  //`timeout`选项定义了请求发出的延迟毫秒数
  //如果请求花费的时间超过延迟的时间，那么请求会被终止

  timeout:1000,
  //`withCredentails`选项表明了是否是跨域请求
  
  withCredentials:false,//default
  //`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便
  //返回一个promise,并提供验证返回
  adapter: function(config){
    /*..........*/
  },
  //`auth`表明HTTP基础的认证应该被使用，并提供证书
  //这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息
  auth: {
    username:&quot;zhangsan&quot;,
    password: &quot;s00sdkf&quot;
  },
  //返回数据的格式
  //其可选项是arraybuffer,blob,document,json,text,stream
  responseType:'json',//default
  //
  xsrfCookieName: 'XSRF-TOKEN',//default
  xsrfHeaderName:'X-XSRF-TOKEN',//default
  //`onUploadProgress`上传进度事件
  onUploadProgress:function(progressEvent){
    //下载进度的事件
onDownloadProgress:function(progressEvent){
}
  },
  //相应内容的最大值
  maxContentLength:2000,
  //`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise
  //如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected
  validateStatus:function(status){
    return status &gt;= 200 &amp;&amp; status &lt;300;//default
  },
  //`maxRedirects`定义了在nodejs中重定向的最大数量
  maxRedirects: 5,//default
  //`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理
  //keeyAlive在选项中没有被默认激活
  httpAgent: new http.Agent({keeyAlive:true}),
  httpsAgent: new https.Agent({keeyAlive:true}),
  //proxy定义了主机名字和端口号，
  //`auth`表明http基本认证应该与proxy代理链接，并提供证书
  //这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header
  proxy: {
    host:'127.0.0.1',
    port: 9000,
    auth: {
      username:'skda',
      password:'radsd'
    }
  },
  //`cancelToken`定义了一个用于取消请求的cancel token
  //详见cancelation部分
  cancelToken: new cancelToken(function(cancel){

  })
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try Electron记实（十）— Windows 上配置 Electron 环境的一些坑Windows 上配置 Electron 环境的一些坑]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-shi-windows-shang-pei-zhi-electron-huan-jing-de-yi-xie-keng-windows-shang-pei-zhi-electron-huan-jing-de-yi-xie-keng/</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-shi-windows-shang-pei-zhi-electron-huan-jing-de-yi-xie-keng-windows-shang-pei-zhi-electron-huan-jing-de-yi-xie-keng/">
        </link>
        <updated>2020-03-11T05:41:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基础的运行环境">基础的运行环境</h2>
<ul>
<li>Node.js 请使用 <code>.msi</code> 安装文件进行安装</li>
<li>yarn 请使用 <code>.msi</code> 安装文件进行安装</li>
<li>⚠️ 安装完成后，需要重启终端，才能加载新的环境路径。</li>
</ul>
<h2 id="安装项目依赖">安装项目依赖：</h2>
<ul>
<li>
<p>直接进行，如果你的网络环境不够科学，可能1天都不会完成：</p>
</li>
<li>
<p>修改源：</p>
<pre><code class="language-sql">	$ yarn config set electron_mirror https://npm.taobao.org/mirrors/electron/
	$ yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/
	$ npm config set electron_mirror https://npm.taobao.org/mirrors/electron/
	$ npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/
	```

</code></pre>
</li>
<li>
<p>执行一遍<code>yarn</code></p>
</li>
</ul>
<h3 id="注意">注意：</h3>
<ul>
<li>可以用 <code>cnpm</code> 安装 Electron；</li>
<li>如果直接使用 npm 进行安装，那么可能会遇到：<br>
软件搜索目录地址，注意是 <code>v8.1.1</code><br>
<img src="https://hwang.top/post-images/1583905374706.png" alt="" loading="lazy"><br>
而淘宝的地址是 <code>/8.1.1/</code><br>
<img src="https://hwang.top/post-images/1583905393691.png" alt="" loading="lazy"><br>
所以你可以参考：<a href="https://segmentfault.com/a/1190000021424025">https://segmentfault.com/a/1190000021424025</a> 进行修改，也可以直接使用 cnpm 进行安装。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1583905408546.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[被阉割的体验｜ 杂记]]></title>
        <id>https://hwang.top/post/bei-yan-ge-de-ti-yan-or-za-ji/</id>
        <link href="https://hwang.top/post/bei-yan-ge-de-ti-yan-or-za-ji/">
        </link>
        <updated>2020-03-11T01:56:32.000Z</updated>
        <content type="html"><![CDATA[<p>今天兴起，拿着 iPad ，想用 Netflix 给投影仪投屏看电影。</p>
<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1583891885092.png" alt="本地显示已经在 AirPlay 了，但实际上..." loading="lazy"></figure>
<p>However... 试了 N 次，点击投屏后，加载2 s（梯子真快）后，直接退出。当时就有一种被阉了的感觉。国内 fake 了  AirPlay  ，然后阉割了它。就好像下了盗版，然后发现他是打码的。</p>
<p>所以，还是好好挣钱，准备买一个 【New】Apple TV 吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try Electron记实（九）— localStorage 储存变量/Electron 的生命周期]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-jiu-localstorage-chu-cun-bian-liang-electron-de-sheng-ming-zhou-qi/</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-jiu-localstorage-chu-cun-bian-liang-electron-de-sheng-ming-zhou-qi/">
        </link>
        <updated>2020-03-03T02:18:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-localstorage">1. localStorage</h2>
<ul>
<li>localStorage 和 sessionStorage 属性允许在浏览器中存储 key/value 对的数据。</li>
<li>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除。</li>
<li>localStorage** 属性是只读的**。</li>
</ul>
<h3 id="一些注意事项">一些注意事项：</h3>
<blockquote>
<p>localStorage 的局限<br>
1、浏览器的大小不统一，并且在 IE8 以上的 IE 版本才支持 localStorage 这个属性。<br>
2、<strong>目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换。</strong><br>
3、localStorage在浏览器的隐私模式下面是不可读取的。<br>
4、<strong>localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡。</strong><br>
5、<strong>localStorage不能被爬虫抓取到。</strong><br>
localStorage 与 sessionStorage 的唯一一点区别就是 localStorage 属于永久性存储，而 sessionStorage 属于当会话结束的时候，sessionStorage 中的键值对会被清空。<br>
如上，这里面，需要处理 localStorage 拿到的值，尤其是 boolean ，因为<code>if(&quot;false&quot;)</code> 再 js 里面的返回值是 <code>true</code>，正确处理的做法，其实可以用<code>JSON.parse(localStorage.checked)</code> 其中 <code>localStorage.checked</code> 返回的是 <code>true</code>或者<code>false</code>的字符串。通过<code>JSON.parse()</code>，可以转为合理的布尔值。</p>
</blockquote>
<h2 id="2-electron-的生命周期">2. Electron 的生命周期</h2>
<h3 id="基础生命周期">基础生命周期</h3>
<ol>
<li>创建过程</li>
</ol>
<ul>
<li>ready 事件</li>
</ul>
<ol start="2">
<li>关闭过程</li>
</ol>
<ul>
<li>window-all-closed 事件</li>
<li>before-quit事件</li>
<li>will-quit事件</li>
<li>quit事件<br>
这里的过程是：<br>
<code>before-quit	=&gt;	will-quit	=&gt;	quit</code><br>
其中，监听了 window-all-closed 后，其他的 quit 就不会监听了。</li>
</ul>
<ol start="3">
<li>macOS 的监听事件</li>
</ol>
<ul>
<li>open-file 事件</li>
<li>open-url 事件</li>
<li>activate 事件： 应用点击 dock 图标的时候</li>
</ul>
<ol>
<li>browser-window-blur事件：当一个 BrowserWindow 失去焦点的时候触发。</li>
<li>browser-window-focus事件：当一个 BrowserWindow 获得焦点的时候触发。</li>
<li>browser-window-created事件：当一个 BrowserWindow 被创建的时候触发。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 08]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-08/</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-08/">
        </link>
        <updated>2020-03-01T05:49:01.000Z</updated>
        <content type="html"><![CDATA[<h5 id="注链接是-ifttt-生成的可能需要科学的上网方式才能够访问">注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</h5>
<p><a href="https://ift.tt/2vxlSYr">现在,以编程方式在 Electron 中上传文件,是非常简单的!</a></p>
<blockquote>
<p>这段讨论,其实本来是讨论如何自动设置 input 标签的值来实现自动选择文件的.前一段有个 Electon 中自动上传文件的需求,被 Google 带到了这个讨论地址.</p>
</blockquote>
<h3 id="微信未完成"><a href="https://ift.tt/37QG0Hm">微信「未完成」</a></h3>
<blockquote>
<p>在这个一年一度的公开课上，<strong>一些人期待微信之父张小龙再多谈一些微信的产品哲学</strong>，即使今年张小龙并为亲赴现场，但还是有许多听众坚持举着手机，录完了他 12 分钟的演讲视频；</p>
</blockquote>
<p><a href="http://weixin.sogou.com/weixin?type=2&amp;query=keso%E6%80%8E%E4%B9%88%E7%9C%8B+%E5%86%8D%E8%A7%81%EF%BC%8C2010%E5%B9%B4%E4%BB%A3">keso怎么看 再见，2010年代的相关微信公众号文章 – 搜狗微信搜索</a></p>
<blockquote>
<p>我们不得不在这样的背景下,跟2010年代说再见,同时去迎接一个更加艰苦的2020年代.这可能会成为新十年的新常态,我们得去适... 2010“Some of us get dipped in flat, some in satin, some in gloss. But every once in a while youfind someone who's iridescent, and .</p>
</blockquote>
<p><a href="https://ift.tt/37hRBi6">macOS 下 Electron 程序的签名及公证</a></p>
<blockquote>
<p>自 macOS 10.14.5 开始，应用程序必须要经过签名以及公证（notarize），否则默认情况下便无法直接运行，会弹出类似下面的警告： “Appname.dmg” can’t be opened because Apple cannot check it for malicious software. This software needs to be updated.</p>
</blockquote>
<p><a href="https://ift.tt/39pY6AM">经历了这次疫情的考验，这些健康、生活、效率习惯值得你长期坚守</a></p>
<blockquote>
<p>出乎所有人的预料，一场由新型冠状病毒引发的疫潮迅速侵袭全国。这场疫病的爆发阶段正逢春节假期，面对突如其来的疫况，大家只能待在家中，尽可能一边做好防护工作，一边习惯在家工作和学习。</p>
</blockquote>
<p><a href="https://ift.tt/2HdH0Ku">需求方法论（1）：需求的理解/来源/挖掘/记录</a></p>
<blockquote>
<p>对于产品经理来说，大多数的日常都是围绕需求展开的——沟通需求、实现需求等。那么对于需求这一内容，如果做好正确理解，相信会对后续实现提供很大帮助。</p>
</blockquote>
<h3 id="现代-web-开发的现状与未来jsdc-2019-演讲全文"><a href="https://ift.tt/31Z5hfk">现代 Web 开发的现状与未来（JSDC 2019 演讲全文）</a></h3>
<blockquote>
<p>本文是我受邀在台北的 JSDC 2019 活动中做的一次分享，从内容上来说已经可以算的上我的 2019 跨年演讲 XD</p>
</blockquote>
<p><a href="https://ift.tt/31IsDqY">对突然而来的远程办公无所适从？搞定这两个最重要的问题就好了</a></p>
<blockquote>
<p>「疫情结束后，你最想做什么？」 这个简单的问题引发的话题在微博上有过亿的阅读量，回答里有一线医务人员誓要夺取胜利、把酒言欢的豪迈，也有家属们想要早日见到亲人的心愿，当然，最多的还是普通人对过去习以为常</p>
</blockquote>
<p><a href="https://ift.tt/39qeh1c">写作新人初长成，我有这些心得想与你分享</a></p>
<blockquote>
<p>编注：本文是「少数派 2019 年度征文活动」的入围文章，本篇征文的投稿赛道为：效率有心得。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>
</blockquote>
<p><a href="https://ift.tt/2T69uez">译文 | Uber 的出行数据可视化设计</a></p>
<blockquote>
<p>微信号 Glosion 功能介绍 用户体验 · 影视影像 · 文化探索⎢@F.</p>
</blockquote>
<p><a href="https://ift.tt/2TjwtDl">依赖注入手册</a></p>
<blockquote>
<p>Midway 中使用了非常多的依赖注入的特性，通过装饰器的轻量特性，让依赖注入变的优雅，从而让开发过程变的便捷有趣。</p>
</blockquote>
<p><a href="https://ift.tt/2omjy6p">react闲谈——JavaScript同步、异步、回调执行顺序之经典闭包setTimeout面试题分析</a></p>
<blockquote>
<p>同步、异步、回调？傻傻分不清楚。 大家注意了，教大家一道口诀： 同步优先、异步靠边、回调垫底（读起来不顺） 用公式表达就是： 同步 =&gt; 异步 =&gt; 回调 这口诀有什么用呢？用来对付面试的。 有一道经典的面试题：  for (va</p>
</blockquote>
<p><a href="https://ift.tt/2VfyQcW">专访回形针吴松磊 | 一条疫情科普视频全网播放 1.5 亿，他们是如何炼成的</a></p>
<blockquote>
<p>微信号 coolbuy 功能介绍 挖掘不一样的品质生活 文章开始之前，先来听听吴松磊的经典问候👇2 月 2 日，一条名为《关于新冠肺炎的一切》的视频刷屏各大社交网络，短短两天时间，全网播放量达到</p>
</blockquote>
<p><a href="https://ift.tt/37N9eGU">我们扒了5000家创业公司的“死因”，手把手教你烧光投资人的钱 | DT数说</a></p>
<blockquote>
<p>功能介绍 第一财经旗下数据研究型新媒体，用大数据解读消费社会和商业图景，连接数据、机构和人群。</p>
</blockquote>
<p><a href="https://ift.tt/394GmLB">如何评判Logo的好坏</a></p>
<blockquote>
<p>微信号 Zaowuchangjing 功能介绍 一个商业顾问的思维精进日记 110/3652020.2.</p>
</blockquote>
<p><a href="https://ift.tt/2wmbW95">2019 我的写作桌面清单推荐</a></p>
<blockquote>
<p>编注：本文是「少数派 2019 年度征文活动」的入围文章，本篇征文的投稿赛道为：看完就想买。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>
</blockquote>
<h3 id="瘟疫-语言和具体的人与历史学家罗新的聊天"><a href="https://telegra.ph/%E7%98%9F%E7%96%AB%E8%AF%AD%E8%A8%80%E5%92%8C%E5%85%B7%E4%BD%93%E7%9A%84%E4%BA%BA%E4%B8%8E%E5%8E%86%E5%8F%B2%E5%AD%A6%E5%AE%B6%E7%BD%97%E6%96%B0%E7%9A%84%E8%81%8A%E5%A4%A9-02-26-2">瘟疫、语言和具体的人：与历史学家罗新的聊天</a></h3>
<blockquote>
<p>按：二零二零年二月，《剩余价值》播客播出了和罗新的访谈后被中国全面封杀。以下是二月廿六日拷贝自 bbs.pku.edu.cn/v2/post-read.php?bid=251&amp;threadid=17548174 的文稿。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oracle 的 循环实例]]></title>
        <id>https://hwang.top/post/oracle-de-xun-huan-shi-li/</id>
        <link href="https://hwang.top/post/oracle-de-xun-huan-shi-li/">
        </link>
        <updated>2020-02-26T07:15:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>好久没有整 Oracle 了，最近因为数据库服务器需要腾挪空间，所以这个本来DBA干的事情，又落到了我这个万金油的头上🤦‍♂️。<br>
折腾了几天，终算是有些明白了... 各种工具链也相对有些熟悉了，还算顺利的把备份做了，用户表删了。数据泵导出、表空间压缩、表空间扩容，都做了一遍，算是有点基础的 DBA 能力了🤦‍♂️...<br>
本文是写给同事看的 Oracle 循环；</p>
</blockquote>
<p>在开始学习循环之前，有以下几个概念，可以先了解：</p>
<h2 id="1-字符串拼接">1. 字符串拼接</h2>
<p>我们使用循环，是为了节省我们的代码数量，提高编写SQL的效率，所以首先我们就需要把 SQL 语句作为字符串进行拼接处理。在oracle中，用<code>'字符串'</code>，来表示这是一个字符串，而 拼接字符串：</p>
<pre><code class="language-sql">'select column '||变量a||' from table;'
</code></pre>
<p>通过<code>||</code>（英文输入下，按住shift + 回车键上面那个键打出）来连接变量与字符串，如果变量的值是 <code>column2</code> 那么这个字符串就会是：</p>
<pre><code class="language-sql">'select column colmn2 from table;'
</code></pre>
<p>所以我只需要将一列数据传入，这个字符串就会动态的变化：</p>
<pre><code class="language-sql">'select column colmn3 from table;'
'select column colmn4 from table;'
'select column colmn5 from table;'
</code></pre>
<ul>
<li>注意事项1 ⚠️: 在<code>'</code> 和 <code>||</code> 之间要注意空格的使用，字符串中的空格是有效的，字符串外的空格可能是无效的；</li>
<li>注意事项2 ⚠️：在字符串内如果想要使用<code>'</code>，那么是通过<code>''</code> 两个单引号表示；</li>
</ul>
<h2 id="2显示自己循环的代码以及-执行字符串内的sql代码">2.显示自己循环的代码以及 执行字符串内的sql代码</h2>
<h3 id="21-显示循环的效果">2.1 显示循环的效果：</h3>
<p>Oracle 中可以使用 <code>sys.dbms_output.put_line()</code> （括内填入需要显示的内容）的方式来查看代码，<strong>这样方便在编写循环时，更加具体的查看到自己的循环结构。</strong></p>
<p>在Navicat 中，可以通过 「DBMS 导出」标签看到输出的内容。</p>
<h3 id="22-执行这个字符串">2.2 执行这个字符串</h3>
<p>通过<code>EXECUTE IMMEDIATE</code>执行语句</p>
<ul>
<li>注意事项3⚠️： 是没有<code>()</code> 的哦。</li>
</ul>
<p>具体的关于 <code>EXECUTE IMMEDIATE</code>的用法参考：</p>
<ul>
<li><a href="https://blog.csdn.net/wang_zhong_cheng/article/details/81202086?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task">EXECUTE IMMEDIATE用法小结</a></li>
</ul>
<h2 id="3-具体的-for-循环语句">3. 具体的 for 循环语句</h2>
<p>基本的结构：</p>
<pre><code class="language-sql">BEGIN
	for i in 1 .. 10 
	loop
		sys.dbms_output_line('循环到数字' || i)
	end loop;
END
</code></pre>
<p><code>BEGIN ... END</code> : 包裹住这么个 SQL 语句块，说明这段代码按照块来执行；<br>
<code>for i in 1 .. 10 loop ... end loop</code>: <code>foor</code> 到第一个 <code>loop</code> ,  表示 <code>i</code> 是1开始，一直取到10（<code>..</code> 表示范围），这个区间是闭合的，1和10都能取到，所以这个 i 会以次变成 1、2、3、4、5… 带入到下面的代码中； <code>loop</code> 到 <code>end loop</code> 表示具体的对循环执行的代码；</p>
<h3 id="实例循环添加数字-依次添加column_201到column_-304的的变量">实例：循环添加数字 —— 依次添加column_201到column_ 304的的变量</h3>
<pre><code class="language-sql">BEGIN
	for i in 201 .. 304 
	loop
		execute immediate 'select column_|| i || 'form table'
	end loop;
END
</code></pre>
<p>这样就可以动态的选取了选区了，不过这个语句会有 100 多个结果，实际中肯定不会这种使用：<br>
下例，为表空间添加237-274的<code>dbf</code>文件：<br>
<img src="DraggedImage-1.png" alt="" loading="lazy"></p>
<h3 id="实例循环某个查询到临时表其中的一列">实例：循环某个查询到临时表其中的一列</h3>
<p>这应该是更加实用的：</p>
<pre><code class="language-sql">BEGIN
	for v_cur in (select t.user_name from user_table_qy t where group_id ='qy') 
	loop
		execute immediate 'drop table' ||v_cur.user_name|| ' purge';
	end loop;
END
</code></pre>
<p>首先：<code>for v_cur in (select t.user_name from user_table_qy t where group_id ='qy') loop</code> 表示，<code>v_cur</code> 是后面这个语句的结果，虽然只有一个变量，但它还是一张表，所以在执行语句时 <code>v_cur.user_name</code> 就表示 <code>user_name</code> 这一列，所以会依次去执行<code>drop table</code> 操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try Nest.js —— 学习笔记]]></title>
        <id>https://hwang.top/post/try-nestjs-xue-xi-bi-ji/</id>
        <link href="https://hwang.top/post/try-nestjs-xue-xi-bi-ji/">
        </link>
        <updated>2020-02-18T11:11:49.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>用到啥学啥系列<br>
其实也是为了另一个小项目写一个小后端。<br>
推荐参考 -&gt; 去这看吧，非常清楚： <a href="https://tc9011.com/2019/07/14/nestjs%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/">参考地址</a></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>用到啥学啥系列<br>
其实也是为了另一个小项目写一个小后端。<br>
推荐参考 -&gt; 去这看吧，非常清楚： <a href="https://tc9011.com/2019/07/14/nestjs%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/">参考地址</a></p>
</blockquote>
<!-- more -->
<h2 id="1-什么是-nestjs">1. 什么是 Nest.js</h2>
<blockquote>
<p>Nestjs 是 Node 渐进式框架，底层默认使用 express（可以通过 Adapter 转换到 fastify），可以使用 express 或者 fastify 所有中间件，完美支持 TypeScript。熟悉 Spring 和 Angular 的同学可以很快上手 Nestjs，它大量借鉴了 Spring 和 Angular 中的设计思想</p>
</blockquote>
<h2 id="2-核心理念">2. 核心理念</h2>
<ul>
<li>
<p>Dependency Injection (DI)，一般翻译为 依赖注入；</p>
</li>
<li>
<p>Inversion of Control （loC），控制反转：主要用降低代码耦合度；相当于是用一个中转的函数来抽象原来类里面需要的变量，这样就实现了耦合度的降低。</p>
<ul>
<li>在 nest.js中，通过 <code>@Injectable()</code> 装饰器来像 loC 容易注册。</li>
</ul>
</li>
<li>
<p>模块化：Module 把controller、service和pipe等打包成内聚的功能块，每个模块聚焦于一个特性区域、业务领域、工作流或通用工具。</p>
<ul>
<li>每个属于这个模块的controller、service等都需要在这个模块中注册，如果需要引入其他模块或者第三方模块，需要将它注册到imports，通过exports可以将相应的service、module等共享出去。</li>
<li>在 nest.js中，通过 <code>@Module()</code> 装饰器来像声明一个模块；</li>
</ul>
</li>
<li>
<p>AOP, 面向切片编程（Aspect Oriented Programming），主要有这么几个切片：</p>
<ul>
<li>Middlewares：中间键</li>
<li>Guards：Guards 和前端路由中的路由守卫一样，主要确定请求是否应该由路由处理程序处理。通过守卫可以知道将要执行的上下文信息，所以和 middleware 相比，守卫可以确切知道将要执行什么。</li>
<li>Interceptors (在流被操纵之前)：可以给每一个需要执行的函数绑定，拦截器将在该函数执行前或者执行后运行。可以转换函数执行后返回的结果，扩展基本函数行为等。</li>
<li>Pipes：是具有 @Injectable() 装饰器的类，并实现了 PipeTransform 接口。通常 pipe 用来将输入数据转换为所需的输出或者处理验证。
<ul>
<li>参数验证等内容</li>
</ul>
</li>
<li>Interceptors (在流被操纵之后)</li>
<li>Exception filters (如果发现任何异常)：内置的 Exception filters 负责处理整个应用程序中的所有抛出的异常，也是 Nestjs 中在 response 前，最后能捕获异常的机会。</li>
</ul>
</li>
<li>
<p>DTO：数据访问对象简称DTO（Data Transfer Object）， 是一组需要跨进程或网络边界传输的聚合数据的简单容器。它不应该包含业务逻辑，并将其行为限制为诸如内部一致性检查和基本验证之类的活动。</p>
</li>
<li>
<p>ORM ：是”对象-关系映射”（Object/Relational Mapping） 的缩写，通过实例对象的语法，完成关系型数据库的操作。通过 ORM 就可以用面向对象编程的方式去操作关系型数据库。</p>
<ul>
<li>在 Java 中，常用 DAO （Data Access Object， 数据访问对象）层来进行各种数据库的操作。DAO 主要作用是分离业务层与数据层，避免业务层与数据层耦合。</li>
<li>Nest.js 中可以使用 typeORM 为 DAO 层，支持MySQL / MariaDB / Postgres / CockroachDB / SQLite / Microsoft SQL Server / Oracle / MongoDB / NoSQL。在 typeORM 中数据库的表对应的就是一个类，通过定义一个类来创建实体。实体（Entity）是一个映射到数据库表（或使用 MongoDB 时的集合）的类，通过@Entity()来标记，具体的：</li>
</ul>
<pre><code class="language-js">import {Entity, PrimaryGeneratedColumn, Column} from &quot;typeorm&quot;;

@Entity()
export class User {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    firstName: string;

    @Column()
    lastName: string;

    @Column()
    age: number;

}
//上面代码将创建以下数据库表：

//+-------------+--------------+----------------------------+
//|                          user                           |
//+-------------+--------------+----------------------------+
//| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
//| firstName   | varchar(255) |                            |
//| lastName    | varchar(255) |                            |
//| isActive    | boolean      |                            |
//+-------------+--------------+----------------------------+
//	使用 @InjectRepository() 修饰器注入 对应的Repository，就可以在这个Repository对象上进行数据库的一些操作。

import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from './user.entity';

@Injectable()
export class UserService {
  constructor(
	@InjectRepository(User)
	private readonly userRepository: Repository&lt;User&gt;,
  ) {}

  async findAll(): Promise&lt;User[]&gt; {
	return await this.userRepository.find();
  }
}
</code></pre>
</li>
</ul>
<h2 id="3-上手-hello-world">3. 上手 hello world ！</h2>
<p>安装：</p>
<pre><code class="language-js">$ npm install -g @nestjs/cli
$ nest new my-awesome-app 
</code></pre>
<p>启动</p>
<pre><code class="language-js">$ npm start
</code></pre>
<p>自此，通过<code>http://loaclhost:3000</code> 就可以看到 Hello World 了。</p>
<h2 id="4-controller">4. Controller</h2>
<p>在 Nest.js 中 Contraller 负责处理传入的请求，并调用对应的 service 完成处理，返回对客户端的响应，可以通过 CLI 来创建 controller：</p>
<pre><code>$nest g co [your-cintroller]
</code></pre>
<p>这时候，CLI 会自动生成 controller 文件，并且把 controller 注册到对应的 module 中。<br>
并且和其他一些 node 框架不一样，Nestjs 路由不是集中式管理，而是分散在 controller 中，通过@controller()中声明的（可选）前缀和请求装饰器中指定的任何路由来确定的。</p>
<pre><code class="language-js">import { Controller, Get } from '@nestjs/common';

import { CatsService } from './cats.service';

@Controller('cats')
export class CatsController {
  constructor(private readonly catsService: CatsService) {
  }

  @Get(':id')
  findOne(@Param('id') id: string): string {
    return this.catsService.getCat();
  }
}
</code></pre>
<p>上面这段代码中，通过 Get 请求去请求http://localhost:3000/cats/1就会调用findOne方法。如果需要调整，添加前缀，可以在 main.ts 中使用 GlobalPrefix 设置：</p>
<pre><code class="language-js">import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.setGlobalPrefix('api/v1');
  await app.listen(3000);
}
bootstrap();
</code></pre>
<h2 id="5-service">5. Service</h2>
<p>在 Nest.js 中，controller 就像是调用 service 的指挥者，把对应的请求分发到相应的 service 中去处理。在 controller 中，我们注意到，在构造函数中注入了<strong>CatsService</strong>实例，来调用对应 service 中的方法。这就是 Nest.js 中依赖注入的注入方式 — 构造函数注入。service 可以看做夹在 controller 和 model 之间的一层，在 service 调用 DAO （在 Nestjs 中是各种 ORM 工具或者自己封装的 DAO 层）实现数据库的访问，进行数据的处理整合。</p>
<pre><code>import { Injectable } from '@nestjs/common';

@Injectable()
export class CatsService {
  getCat(id: string): string {
    return `This action returns ${id} cats`;
  }
}
</code></pre>
<p>上面代码中通过@Injectable()定义了一个 service，这样你就可以在其他 controller 或者 service 中注入这个 service。</p>
<hr>
<p>参考：<a href="https://tc9011.com/2019/07/22/nestjs%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/">https://tc9011.com/2019/07/22/nestjs%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</a></p>
]]></content>
    </entry>
</feed>