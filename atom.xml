<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hwang.top</id>
    <title>Hwang&apos;s Blog</title>
    <updated>2020-02-11T09:35:53.915Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hwang.top"/>
    <link rel="self" href="https://hwang.top/atom.xml"/>
    <subtitle>欢迎来到 Hwang 的小博客 &lt;br&gt;
这显然不是什么技术博客，也不会有太多值得期待的干货。&lt;br&gt;</subtitle>
    <logo>https://hwang.top/images/avatar.png</logo>
    <icon>https://hwang.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Hwang&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 07]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-07</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-07">
        </link>
        <updated>2020-02-11T09:33:54.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
<p><a href="https://ift.tt/2QCCQ3e">中国企业获设计“剽窃奖”被质疑</a></p>
<blockquote>
<p>近日，一则中国制造商包揽德国“金鼻子剽窃奖”前十名的消息引发关注。中国设计是否存在山寨外国设计再次引发热议。</p>
</blockquote>
<p><a href="https://ift.tt/2tm6vG7">为什么DevOps很好，但却很难落地，大家对DevOps是怎么理解的？</a></p>
<blockquote>
<p>关于 DevOps 为什么难落地，与其我们在这里闭门造车，倒不如看看来自专家的看法</p>
</blockquote>
<p><a href="https://ift.tt/3a4CZW0">为什么进度条永远卡在 99%？</a></p>
<blockquote>
<p>机密处万籁俱寂，防守严格，他一路破解密码，悄声潜入，没料到 U 盘一插电脑，警报就开始厉声鸣叫，门外死神般的脚步纷至沓来，踩得他浑身汗如雨下。</p>
</blockquote>
<p><a href="https://ift.tt/2Rop4Bl">阿里巴巴发布全新奥运组合LOGO！仅用9根线“托”起五环！</a></p>
<blockquote>
<p>微信号 AlibabaDesign 功能介绍 这是一个充满魅力的组织，是一群疯狂热爱用户体验的家伙；这里有国际音乐家、有舞者、游戏玩家、摄影师以及各个领域的爱好者；我们坚信，创新、设计、技术和客户第一的价值观粘合在一起，</p>
</blockquote>
<p><a href="https://ift.tt/2QWZzXW">2020，我想如何讲述自己的故事——2019总结</a></p>
<blockquote>
<p>12月的 Monthly Review 已经做了2019年终总结的播客有声版，加上2019半年总结也写了，总感觉下半年应该没什么值得记录。而且一直没有想清楚2020年的目标和展望，想通过整理成文字版的过程给自己一些灵感。</p>
</blockquote>
<p><a href="https://ift.tt/2NapoT0">2019，小程序又给了谁机会？</a></p>
<blockquote>
<p>以上是宏观的生态数据，透过这些数据，我们不免会有一个疑惑：是谁承担起了这些流量？</p>
</blockquote>
<p><a href="https://ift.tt/39k6GRO">iPhone 可有设计哲学？</a></p>
<blockquote>
<p>iPhone 4G 出来之前，注定会有更多强大，快速，激动人心的新设备来挑战智能手机的巅峰 : 3GS 。</p>
</blockquote>
<p><a href="https://ift.tt/2tpSyH7">2019 创业回顾</a></p>
<blockquote>
<p>2019 公司人数 +1 -1，最后是四个人。还是蛮多人知道会惊讶一下，你们只有四个人？两个运营，加一个全能工程师，加我（还有两只猫）。</p>
</blockquote>
<p><a href="https://diygod.me/2019/">2019 我做了什么</a></p>
<blockquote>
<p>虽然维护的项目有保持健康的成长，但没有做什么新东西 2020 打算投入更多的时间在开源项目上，不再怠惰于现有项目的日常维护，而是做一些新东西，（可能）有 DPlayer 重构、Telegram Bot 平台、RSS 客户端等</p>
</blockquote>
<p><a href="https://ift.tt/30fNiC1">刘慈欣：中国变成民主体制会是人间地狱</a></p>
<blockquote>
<p>断章取义通常有危险。但刘慈欣在接受《纽约客》采访时的这几段话已经刻板八股到了 caricature 的程度，断章与否其实没有任何区别了。采访是樊嘉扬做的，所以说的应该是普通话。</p>
</blockquote>
<p><a href="https://ift.tt/39jANbM">钉钉 Dark Mode 设计</a></p>
<blockquote>
<p>微信号 AlibabaDesign 功能介绍 这是一个充满魅力的组织，是一群疯狂热爱用户体验的家伙；这里有国际音乐家、有舞者、游戏玩家、摄影师以及各个领域的爱好者；我们坚信，创新、设计、技术和客户第一的价值观粘合在一起，</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try-Electron记实（五）— 异步的一些东西 ：Promise 对象]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-wu-yi-bu-de-yi-xie-dong-xi-promise-dui-xiang</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-wu-yi-bu-de-yi-xie-dong-xi-promise-dui-xiang">
        </link>
        <updated>2020-02-11T09:29:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>参考资料：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544">https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544</a></p>
</blockquote>
<p>先吐槽，从来没有接触过 Promise 对象相关的东西，只知道 JS 的世界里，异步是一个非常重要的概念。今天写逻辑代码，第一次接触到了，因为 function 异步执行，想当然的以为 return 的就是给赋值的结果，结果因为异步并没有拿到最后的结果。</p>
<p>首先，关于 Promise 和 async/await ：<a href="https://zhuanlan.zhihu.com/p/23249103">https://zhuanlan.zhihu.com/p/23249103</a>：</p>
<blockquote>
<p>可以很明显的看到，callback 来控制异步的方式虽然非常简单，但也过于原始。在实际的使用中代码的逻辑顺序和业务的顺序是不相同的，错误控制基本靠手动检查err参数。<br>
而到了 Promise 中这种情况好了很多，通过链式调用，Promise 可以直接在 then 中返回一个新的 Promise 来将异步操作串联起来，也有了统一的 catch 来做错误处理。美中不足的是，你仍然需要传递一个回调函数给 then，通过 then 来串联虽然保证了至少代码顺序上和真正的逻辑顺序一致，但和同步代码的差别仍然很大。<br>
async/await 则直接将其变成了同步的写法，心智负担大大降低。</p>
</blockquote>
<p>具体的：</p>
<blockquote>
<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。<br>
resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。<br>
Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p>
</blockquote>
<blockquote>
<p>then方法可以接受两个回调函数作为参数。<br>
第一个回调函数是Promise对象的状态变为resolved时调用，<br>
第二个回调函数是Promise对象的状态变为rejected时调用。<br>
其中，第二个函数是可选的，不一定要提供。<br>
这两个函数都接受Promise对象传出的值作为参数。</p>
</blockquote>
<p>用法：</p>
<pre><code class="language-js">const promise = new Promise(function(resolve, reject) {
  // ... some code

  if (/* 异步操作成功 */){
    resolve(value);
  } else {
    reject(error);
  }
});


promise.then(function(value) {
  // success
}, function(error) {
  // failure
});

</code></pre>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try-Electron记实（四）— 项目中添加路由]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-si-xiang-mu-zhong-tian-jia-lu-you</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-si-xiang-mu-zhong-tian-jia-lu-you">
        </link>
        <updated>2020-02-11T09:29:32.000Z</updated>
        <content type="html"><![CDATA[<p>通过路由的方式进行侧边导航栏的切换：</p>
<ol>
<li>安装 vue-router，并添加到项目中；</li>
<li>在 main.js 中引入 vue-router 插件；</li>
</ol>
<pre><code class="language-bash">...
... //省略其他
import Router from 'vue-router'

Vue.use(Router)

</code></pre>
<ol start="3">
<li>引入路由文件，并在 Vue 实例中添加配置</li>
</ol>
<pre><code>import router from '.'router/index'
...//省略其他
new Vue({
  router: router, //添加配置
  render: h =&gt; h(App),
}).$mount('#app')

</code></pre>
<ol start="4">
<li>
<p>编辑路由文件<code>router/index.js</code> 中添加需要的路由路径</p>
</li>
<li>
<p><code>&lt;router-link to=&quot;&quot;&gt;</code> 和 <code>&lt;router-view&gt;</code> 标签 一个是用来跳转的，一个是用来显示调整页面的。</p>
</li>
</ol>
<p>Done！ 基础的路由添加步骤就是这样了。在其他具体的事情，具体在看吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try-Electron记实（三）— ant-design-vue 主题的修改]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-san-ant-design-vue-zhu-ti-de-xiu-gai</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-san-ant-design-vue-zhu-ti-de-xiu-gai">
        </link>
        <updated>2020-02-10T08:07:32.000Z</updated>
        <content type="html"><![CDATA[<p>官方文档描述：</p>
<blockquote>
<p>在 vue cli 3 中定制主题<br>
项目根目录下新建文件vue.config.js</p>
<pre><code>// vue.config.js
module.exports = {
  css: {
    loaderOptions: {
      less: {
        modifyVars: {
          'primary-color': '#1DA57A',
          'link-color': '#1DA57A',
          'border-radius-base': '2px',
        },
        javascriptEnabled: true
      }
    }
  }
}
</code></pre>
</blockquote>
<h3 id="关于-vueconfigjs">关于- vue.config.js :</h3>
<blockquote>
<p>每次在终端运行 vue-cli-service 时，都会先找到对应的 vue.config.js，获取到相关配置，才继续执行其它操作</p>
</blockquote>
<h3 id="动手试试">动手试试</h3>
<p>直接在项目跟目录添加这么一个配置文件即可。<br>
因为 vue.config.js 是在 vue-cli-service 运行时检查的，所以在使用 electron-builder 构建的项目中，并不能热更新。<br>
我的理解是，这个 vue-cli-service 启动后，才可以热更新 electron 的窗体程序和Vue写的前端页面的，热更新并不会重新启动一遍 vue-cli-service。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try-Electron记实（二）— ant-design 的引入、font-awesome 的引入]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-er-ant-design-de-yin-ru-font-awesome-de-yin-ru</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-er-ant-design-de-yin-ru-font-awesome-de-yin-ru">
        </link>
        <updated>2020-02-07T10:47:45.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>简单记录一下；<br>
有一点点的坑是引入 less 的事情，其他都挺顺利的；</p>
</blockquote>
<p>ant-design 和 font-awesome 的引入</p>
<ol>
<li>引入，在 <code>src/main.js</code> 文件内引入：</li>
</ol>
<pre><code class="language-bash">import Vue from 'vue';
import App from './App.vue';
import Antd from 'ant-design-vue';
import 'ant-design-vue/dist/antd.less';
import { library } from '@fortawesome/fontawesome-svg-core'
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'
import {
	【需要的包】
} from '@fortawesome/free-solid-svg-icons'

library.add(
	【需要的包】
)
 
Vue.component('font-awesome-icon', FontAwesomeIcon)

Vue.config.productionTip = false;
Vue.use(Antd);


new Vue({
  render: h =&gt; h(App),
}).$mount('#app')

</code></pre>
<ol start="2">
<li>其中，如果需要配置 ant 的主题</li>
</ol>
<pre><code class="language-bash">	import 'ant-design-vue/dist/antd.less';
	```
	使用 less 配置主题。</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于团队协作工具的理想形态，这是我从飞书上得到的思考]]></title>
        <id>https://hwang.top/post/guan-yu-tuan-dui-xie-zuo-gong-ju-de-li-xiang-xing-tai-zhe-shi-wo-cong-fei-shu-shang-de-dao-de-si-kao</id>
        <link href="https://hwang.top/post/guan-yu-tuan-dui-xie-zuo-gong-ju-de-li-xiang-xing-tai-zhe-shi-wo-cong-fei-shu-shang-de-dao-de-si-kao">
        </link>
        <updated>2020-02-05T08:26:47.000Z</updated>
        <summary type="html"><![CDATA[<p>2017 年底，我加入我们导师的团队，开始创业。当我们人数达到 10 人时，我们也发现了，在微信上沟通工作时，总会出现：</p>
<ol>
<li>沟通记录混乱：用过微信的大家都懂。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<p>2017 年底，我加入我们导师的团队，开始创业。当我们人数达到 10 人时，我们也发现了，在微信上沟通工作时，总会出现：</p>
<ol>
<li>沟通记录混乱：用过微信的大家都懂。</li>
</ol>
<!-- more -->
<ol start="2">
<li>
<p>文件丢失，文件版本混乱：微信并不会负责你的文件存储。</p>
</li>
<li>
<p>共享信息沟通不畅：每当有新人入职时，许多问题需要重复解答。</p>
</li>
<li>
<p>项目管理不畅：各种任务环节很难被监控到。</p>
</li>
</ol>
<p>这些问题频繁出现在前几个月，解决这些问题的任务被安排在了我身上，当时市面上能够选择的产品，主要可以分为「国内系」以及「海外系」。一家企业在日常业务中，普遍需要的，其实就是三大功能，团队沟通、信息资源管理、项目管理。无论是生产、研发还是销售环节，这三大基础需求都是存在的。一家企业根据他所处的领域的不同，企业的组织形式千差万别，对于这「三大基础需求」也是有显著的差异的。</p>
<p>更多内容前往少数派阅读：https://sspai.com/post/58385</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[figma 的一些快捷键]]></title>
        <id>https://hwang.top/post/figma-de-yi-xie-kuai-jie-jian</id>
        <link href="https://hwang.top/post/figma-de-yi-xie-kuai-jie-jian">
        </link>
        <updated>2020-02-05T08:20:53.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>command + option +v 样式全部复制</p>
</li>
<li>
<p>command + 1/2 切换图层和组件库</p>
</li>
<li>
<p>shift + 1/2 放大当前 对象</p>
</li>
<li>
<p>command + option + G 创建 frame //我比较常用的</p>
</li>
<li>
<p>按住 option 从组件库中拖拽出组件，替换组件 / 按住 option + command 保持原有大小</p>
</li>
<li>
<p>option + L 合并图层 （为选中时，收起所有的</p>
</li>
<li>
<p>command+shift+K 批量添加图片</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[疫情]]></title>
        <id>https://hwang.top/post/yi-qing-ji-lu</id>
        <link href="https://hwang.top/post/yi-qing-ji-lu">
        </link>
        <updated>2020-02-02T05:43:43.000Z</updated>
        <content type="html"><![CDATA[<p>2020 这是一段比较难忘的记忆...</p>
<p>这里不会记录更多，但是在我的 Google Photo 里，记录了一切。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try-Electron 记实（一）]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-yi</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-yi">
        </link>
        <updated>2020-01-21T05:24:27.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>记录一下第一次正式开始写一个 Electron 应用；<br>
基础比较差，几乎没什么基础...</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>记录一下第一次正式开始写一个 Electron 应用；<br>
基础比较差，几乎没什么基础...</p>
</blockquote>
<!-- more -->
<h2 id="开始一个-electron-项目">开始一个 Electron 项目</h2>
<ol>
<li>使用 Vue-cli 3.0 以上，进行项目初始化；</li>
</ol>
<pre><code class="language-bash">vue add electron-builder 
vue create .
</code></pre>
<ol start="2">
<li>运行这个项目：</li>
</ol>
<pre><code class="language-bash">yarn electron:serve
</code></pre>
<p>Done</p>
<h2 id="npm-常用参数记录">npm 常用参数记录</h2>
<p>发现对 npm 的一些参数还不是很熟悉，记录一下；</p>
<ul>
<li>基本的安装/卸载：<pre><code class="language-bash">npm install/uninstall [packegename]
</code></pre>
其中安装这一部分，可选参数：
<ul>
<li><code>--save</code>or <code>-S</code>：添加到<strong>生产环境</strong>的依赖 ;</li>
<li><code>--save-dev</code> or <code>-D</code>：添加到<strong>开发环境</strong>；</li>
<li><code>--save-optional</code> or <code>-O</code>： 添加到可选环境配置 （好像不太常用）；</li>
<li><code>--save-exact</code> or  <code>-E</code> ：指定版本安装模块；</li>
</ul>
</li>
<li>开始项目时一次性安装依赖包<pre><code class="language-bash">npm install
</code></pre>
可选参数：
<ul>
<li><code>--global</code> or <code>-g</code> 全局安装；</li>
</ul>
</li>
<li>卸载部分可选参数与安装时相同
<ul>
<li>卸载还可以使用：<code>npm remove</code> 、<code>npm rm</code>、<code>npm r</code> 、 <code>npm un</code> 、 <code>npm unlink</code>(unlink 与 link 好像是测试的)</li>
</ul>
</li>
<li><code>npm list/ll/la/ls</code> 列出已安装的模块；</li>
<li><code>npm outdated</code> 列出需要更新的模块；</li>
<li><code>npm update</code> 更新依赖包，可选参数 <code>--global</code> or <code>-g</code></li>
<li><code>npm root</code> 查看命令的绝对路径；</li>
<li><code>npm config</code> npm 的配配置</li>
</ul>
<h2 id="yarn-常用参数记录">yarn 常用参数记录</h2>
<p>顺便整理一下 yarn 的一些参数；yarn 用于固定开发中包的各种版本；</p>
<ul>
<li><code>yarn add</code><pre><code class="language-bash">	yarn add [package]@[version]
	```
	添加到生产环境中
- `--dev` or `-D` 安装到生产环境中
- 不常用的：`yarn global add &lt;package...&gt; ` 全局安装；
</code></pre>
</li>
<li><code>yarn cache</code>
<ul>
<li><code>yarn cache dir</code>： 列出当前的 yarn 全局缓存在哪里</li>
<li><code>yarn cache list --pattern &lt;pattern&gt;</code> 列出匹配指定模式的已缓存的包。</li>
<li><code>yarn cache clean</code> 清除全局缓存。</li>
</ul>
</li>
<li><code>yarn list</code>
<ul>
<li>默认情况下，所有包和它们的依赖会被显示。</li>
<li><code>--depth</code> 深度参数</li>
</ul>
</li>
<li><code>yarn remove</code>
<ul>
<li>默认移除依赖，并更新 package.json 和 yarn.lock</li>
</ul>
</li>
<li><code>yarn run</code>
<ul>
<li>运行定义的动作</li>
</ul>
</li>
<li><code>yarn upgrade</code>
<ul>
<li>更新升级包；</li>
</ul>
</li>
<li><code>yarn global bin</code>
<ul>
<li>查看全局安装的目录</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron 初试]]></title>
        <id>https://hwang.top/post/election-chu-shi</id>
        <link href="https://hwang.top/post/election-chu-shi">
        </link>
        <updated>2020-01-05T06:51:33.000Z</updated>
        <summary type="html"><![CDATA[<p>之前做的上传工具，打算用 electron 改做了。原先的使用 Pyside2 写的，软件写起来没什么问题，用起来也很舒服，但是打包的话就相对比较麻烦了，各种坑，Windows 可能还勉强能够应付一下，但是mac 版的资料属实能够找到的资料也不够多。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前做的上传工具，打算用 electron 改做了。原先的使用 Pyside2 写的，软件写起来没什么问题，用起来也很舒服，但是打包的话就相对比较麻烦了，各种坑，Windows 可能还勉强能够应付一下，但是mac 版的资料属实能够找到的资料也不够多。</p>
<!-- more -->
<p>选择前 electron 主要是我司目前是有前端开发的，这样后续产品也能接上。</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1galosj37orj30qc0zcmz2.jpg" alt="" loading="lazy"></figure>
<h2 id="试试-election-的样例">试试 election 的样例</h2>
<p>clone了项目后，直接用：</p>
<pre><code class="language-bash">$ npm install
</code></pre>
<p>结果中间就卡住了，没有继续下载；大概是卡在 core-js 这个包的安装时候。</p>
<p>强制停止，然后删除 node-model 文件，再修改代理：</p>
<pre><code class="language-bash">$ npm config set registry https://registry.npm.taobao.org
</code></pre>
<p>然后在安装：</p>
<pre><code class="language-bash">$ npm install
</code></pre>
<p>嘿，好家伙，直接显示两个包没下。看了下还是 core-js；所以就只能用 cnpm 了。<br>
下载 cnpm：</p>
<pre><code class="language-bash">$ npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre>
<p>然后使用 cnpm：</p>
<pre><code class="language-bash">$ cnpm install
$ cnpm start
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1galosd3plcj312f0u0q87.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>