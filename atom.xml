<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hwang.top</id>
    <title>Hwang&apos;s Blog</title>
    <updated>2019-10-30T05:39:14.225Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hwang.top"/>
    <link rel="self" href="https://hwang.top/atom.xml"/>
    <subtitle>欢迎来到 Hwang 的小博客 &lt;br&gt;
这显然不是什么技术博客，也不会有太多值得期待的干货。&lt;br&gt;</subtitle>
    <logo>https://hwang.top/images/avatar.png</logo>
    <icon>https://hwang.top/favicon.ico</icon>
    <rights>All rights reserved 2019, Hwang&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[STQT 查询工具 Oracle 相关记录 （2）sqlalchemy 连接 oracle 中的一些注意事项]]></title>
        <id>https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu-2sqlalchemy-lian-jie-oracle-zhong-de-yi-xie-zhu-yi-shi-xiang</id>
        <link href="https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu-2sqlalchemy-lian-jie-oracle-zhong-de-yi-xie-zhu-yi-shi-xiang">
        </link>
        <updated>2019-10-30T05:37:28.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1-sqlalchemy-需要通过-cx_oracle-连接数据库">1. sqlalchemy 需要通过 cx_Oracle 连接数据库</h2>
<p><code>pip install cx_Oracle</code> 即可安装。</p>
<h2 id="2-cx_oracle-并不能直接连接-oracle-还需要驱动">2. cx_Oracle 并不能直接连接 Oracle ，还需要驱动</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1-sqlalchemy-需要通过-cx_oracle-连接数据库">1. sqlalchemy 需要通过 cx_Oracle 连接数据库</h2>
<p><code>pip install cx_Oracle</code> 即可安装。</p>
<h2 id="2-cx_oracle-并不能直接连接-oracle-还需要驱动">2. cx_Oracle 并不能直接连接 Oracle ，还需要驱动</h2>
<!-- more -->
<p>下载驱动，注意版本号：</p>
<ol>
<li>下载地址：https://www.oracle.com/database/technologies/instant-client/downloads.html 需要下载与服务器端对应的 版本。 我这里下载的文件是：<code>instantclient-basic-windows.x64-11.2.0.4.0.zip</code></li>
<li>解压，里面是一个 <code>instantclient_11_2</code> 文件夹。比如直接放在 C 盘下。</li>
<li>添加这个文件到环境路径中 <code>C:\instantclient_11_2</code></li>
<li>重启 Python 运行一遍。</li>
</ol>
<h2 id="3-连接如果环境变量并没有解决问题">3. 连接如果环境变量并没有解决问题：</h2>
<p>尝试将 <code>.dll</code> 文件存放到 python 的 <code>Lib\site-packages</code> 路径中。</p>
<figure data-type="image" tabindex="1"><img src="http://112.17.171.130:10080/FTPshare/20191028180549WzAo.jpg" alt=""></figure>
<p>一般来说这样就可以了。</p>
<h2 id="4-一些错误记录">4. 一些错误记录</h2>
<ol>
<li>
<p>错误代码 ORA-28547，应该是 <code>oci.dll</code> 文件版本错误。</p>
</li>
<li>
<p>错误代码 ORA-03135，也可能是上面这个问题。</p>
<p>出现以上错误，优先检查数据库版本号是不是正确的，或者是不是下来 <code>basiclite</code>之类的文件。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[所学皆会有所用，一个后台运营小编辑的贺词———祝贺「刘西川阅读写作课」公众号关注人数突破 10000 人]]></title>
        <id>https://hwang.top/post/suo-xue-jie-hui-you-suo-yong-yi-ge-hou-tai-yun-ying-xiao-bian-ji-de-he-ci-zhu-he-liu-xi-chuan-yue-du-xie-zuo-ke-gong-zhong-hao-guan-zhu-ren-shu-tu-po-10000-ren</id>
        <link href="https://hwang.top/post/suo-xue-jie-hui-you-suo-yong-yi-ge-hou-tai-yun-ying-xiao-bian-ji-de-he-ci-zhu-he-liu-xi-chuan-yue-du-xie-zuo-ke-gong-zhong-hao-guan-zhu-ren-shu-tu-po-10000-ren">
        </link>
        <updated>2019-10-28T04:08:40.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文是应刘老师邀请写的。<br>
属实是太久没写了，生疏了。<br>
还好有刘老师修改，不然真是惨不忍睹了。<br>
刚写完，给女朋友改，她都破口大骂 “写的什么垃圾”。 🌚</p>
</blockquote>
<p>从零到一（万）经历了不平凡的过程，零是开始，10000是被初步的认可。祝贺“刘西川阅读写作课”微信公众号关注人数，突破10000人，完成了从零到一（万）的重要一步。二零一八年 四月，该号正式上线，开启了它的不易之旅。我也有幸参与到这个“旅程”之中，作为一名后台人员，我负责将刘西川老师的文章排布到公众号上，并制作推送给大家。各位阅读的早期文章，都是由我这个小编排版的。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文是应刘老师邀请写的。<br>
属实是太久没写了，生疏了。<br>
还好有刘老师修改，不然真是惨不忍睹了。<br>
刚写完，给女朋友改，她都破口大骂 “写的什么垃圾”。 🌚</p>
</blockquote>
<p>从零到一（万）经历了不平凡的过程，零是开始，10000是被初步的认可。祝贺“刘西川阅读写作课”微信公众号关注人数，突破10000人，完成了从零到一（万）的重要一步。二零一八年 四月，该号正式上线，开启了它的不易之旅。我也有幸参与到这个“旅程”之中，作为一名后台人员，我负责将刘西川老师的文章排布到公众号上，并制作推送给大家。各位阅读的早期文章，都是由我这个小编排版的。</p>
<!-- more -->
<p>我至今仍然非常喜欢张五常曾经举过的一个例子，他说：</p>
<p>他拿100元钱，掉在地上，为什么这个钱会掉在地上，这个问题物理学能够解释，而这100块钱，为什么不见了呢？这个问题，经济学能够解释。</p>
<p>这个例子非常好的诠释了经济学的价值。我很喜欢这个“讨巧”的例子，它让我这位刚踏入大学就选择经济学专业的大学生豁然开朗：经济学居然如此有用，在自然学科群中，物理学是基础，而经济学（经济学的解释）则是社会科学中的“物理学”。我为自己能在经济学专业学习而感到高兴。在我看来，这是一种所学有用的观念，这种观念让我更加自信，也更加坚定的去汲取更多的知识。</p>
<p>我们公众号中上就曾经推送过类比物理学的经济学文章<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1572080568&amp;ver=1935&amp;signature=XNfF9b4Na6yg8syPbnHhnFp0maurfbLN12DJ6bNeqbupjQPeu8NhfvvDg3xDQA2PJgpxT9BsqPAXKqeMH6EZVguDWwAqhMFbccEh42gL7nNB1SXW2CO50o0f06fIMLbw&amp;new=1">《张五常 | 演化、逻辑与公理：经济学是社会科学中的皇后？》</a>。每次为文章排版时，我都会提前仔细阅读这些文章，这一过程也让我积累了许多写作、阅读以及社科研究相关的知识。古语曰“家中有粮，心里不慌”，积累的这些知识给我最大的底气是，当我写本科毕业论文的时候，能够有条不紊，相对比较自如，有一种拿着“答案”写“答案”的感觉。也许会有人质疑我，认为这有点夸张。但我可以肯定的告诉大家，如果不信，可以翻阅刘老师的写作课系列推文，学习论文写作每个部分的要点，必然能找到“手握答案”的感觉。除了有关社会科学范式的文章，我们还推送了一些有关引言、摘要等方面的文章。如果你还为写本科毕业论文而苦恼，那么我推荐你拜读一下这篇：<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1572080621&amp;ver=1935&amp;signature=XNfF9b4Na6yg8syPbnHhnFp0maurfbLN12DJ6bNeqbvzDHtCYl-gGz*IBaiwxdz2NBhzQqAivTbE*kjuk1zPpKc-0jwi0*MNIGl-2bCVpF7sTFvlyd8rqubY0zdcApSi&amp;new=1">《彭玉生： “洋八股”与社会科学规范 》</a>，相信你读完定会恍然大悟——天呐！社科写作原来也是有套路可寻的。</p>
<p>因为大部分推文的内容都专注于阅读与写作，这里的学与用是能够相匹配的，对论文写作的帮助也是有口皆碑。若各位老师与同学以此为目的来关注本号，必会有意想不到的收获。细心的关注者也许会发现，这个公众号以“文心雕龙”为 logo ，《文心雕龙》是一本文艺理论方面的书籍，该书作者一是反对不切实际的浮靡文风，二是主张实用的“攡文必在纬军国”之落实文风。我想，尽显真诚，力推干活，也许正是刘老师选择文新雕龙的初心吧。实用的文风其实也隐含着实用主义的价值主张。信息网络的发达亦让人们更加容易的输出内容，海量信息使得人们更加注重甄别信息，同时也更加“爱惜”自己的时间。人们总会扪心自问：看这个有用吗？或许基于实用主义追求所谓的干货，并没有什么错！我只想借助自己的例子，谈谈自己的一些认识。</p>
<p>在为刘老师运营这个公众号的过程中，为了提高自己的编辑效率，我专门学习了 CSS 的写法。很多人可能不大了解 CSS，其实它像是推文的&quot;衣服&quot;，通过学习和编辑一个文件，可以为刘老师的文章快速地套上“衣服”，排出一篇精美版式的文章。在一般人看来，作为一名经济学专业的大学生，学习这些，并没有太多益处，反而有点浪费时间。但是，谁又能想到，毕业后的我竟然真的写起了代码。我学 CSS 的经验其实也是来自于学习 stata 、撰写 do 文件。do 文件几乎是经济学学生对于 “编程”的初步认识。而往后，我以 CSS 为基础，掌握了 HTML，又学会 了Python，但如今，竟成了半个&quot;码农&quot;。这一切，谁又能想到呢 ？</p>
<p>大学，是学习效率最高，也最能够集中精力学习的时期，于我而言，多学习一些自己喜欢的知识总是没有坏处的。我相信所学皆会有所用。有时候，在很多人看来，这样的观点显得有些 阿 Q 精神。我也很难去反驳那些有用才学的“精英”的观点，而我所做的，只是真诚地分享一些自己的体会。</p>
<p>说了这么多，“腹有诗书气自华”，多多阅读好的内容，总是能够让人在任何时候提笔撰文都更加有状态。无论是社科写作，还是程序员要写的各类技术文档，“多阅读”总是“写得好”的前提。刘老师常说，“己所不欲，勿施于人”，自己都不愿意看的东西，就不要放在公众号上。我的经历与体会分享给大家，只是想说，刘老师所选所作之内容，都有其价值所在，值得我们阅读和学习。</p>
<p>最后，再次祝贺刘西川阅读写作课微信公众号，终于迈出了更坚实的一步，取得了关注者突破10000 名的可喜成绩，希望该号能够在社科领域继续发光发热，指引更多在社科领域努力的学子们前行，帮助更多对社科写作感到困惑的初学者和年轻朋友。同时，也希望“阅读写作课”能够在更广泛的领域产生更积极的影响，近期的 推文<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1572080468&amp;ver=1935&amp;signature=XNfF9b4Na6yg8syPbnHhnFp0maurfbLN12DJ6bNeqbvqPdSeao0pXSOey5PAJuBKRdsOFKizMhmkzUS15ekpHtOxToHp6TIIP*orb*tvVmTTQmazUZ8ZtjdkcFTrK9AE&amp;new=1">《会议纪要这样写，才专业！》</a>(#)推文就是一次积极的尝试。</p>
<p>😹 结尾彩蛋：</p>
<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1572235983560.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ STQT 查询工具 Oracle 相关记录]]></title>
        <id>https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu</id>
        <link href="https://hwang.top/post/stqt-cha-xun-gong-ju-oracle-xiang-guan-ji-lu">
        </link>
        <updated>2019-10-25T09:40:11.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1571996426849.png" alt=""></figure>
<h2 id="一-sql-oracle-中的表名-字段名-字段类型等信息">一、SQL - Oracle 中的表名、字段名、字段类型等信息</h2>
<h3 id="表-all_tab_columns">表 <code>ALL_TAB_COLUMNS</code></h3>
<p>表 <code>all_tab_columns</code> 的内容包含了所有表的字段信息，可以通过查询语句获取需要的内容。</p>
<pre><code class="language-sql">SELECT * FROM ALL_TAB_COLUMNS 
</code></pre>
<p>示例：</p>
<pre><code class="language-sql">--查询某张表中的字段名，字段类型，是否为空，字段长度等信息
SELECT COLUMN_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE
  FROM ALL_TAB_COLUMNS
 WHERE TABLE_NAME = 'EMPLOYEES'
 ORDER BY COLUMN_ID;
 
--查询某张表中的字段名，字段类型，是否为空，字段长度等信息
SELECT * FROM  ALL_TAB_COLUMNS WHERE TABLE_NAME = 'EMPLOYEES'
</code></pre>
<h3 id="表-user_table-用户表">表 <code>USER_TABLE</code> 用户表</h3>
<p>去除系统内的表格</p>
<pre><code class="language-sql"> SELECT * FROM USER_TABLES WHERE TABLESPACE_NAME&lt;&gt;'SYSTEM' AND TABLESPACE_NAME&lt;&gt;'SYSAUX' 
</code></pre>
<h2 id="二-权限管理记录">二、权限管理记录</h2>
<ul>
<li>自己本地使用 Docker 搭了一个 Oracle 数据库</li>
</ul>
<h3 id="授权表空间">授权表空间</h3>
<pre><code class="language-sql">alter user 用户名 quota unlimited on 表空间;
</code></pre>
<blockquote>
<p>eg:</p>
</blockquote>
<pre><code class="language-sql">ALTER USER test01 QUOTA UNLIMITED ON QY_TEST;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 mac OS 的 VS code 中配置  PySide2 的环境的注意事项]]></title>
        <id>https://hwang.top/post/zai-mac-os-de-vs-code-zhong-pei-zhi-pyside2-de-huan-jing-de-zhu-yi-shi-xiang</id>
        <link href="https://hwang.top/post/zai-mac-os-de-vs-code-zhong-pei-zhi-pyside2-de-huan-jing-de-zhu-yi-shi-xiang">
        </link>
        <updated>2019-10-23T05:55:54.000Z</updated>
        <content type="html"><![CDATA[<p>基本信息可以参考：<a href="https://blog.csdn.net/gongjianbo1992/article/details/100654638">https://blog.csdn.net/gongjianbo1992/article/details/100654638</a></p>
<p><code>pyside2-rcc</code>  : 将 资源文件专为 Python 可以用的文件<br>
<code>pyside2-uic</code> : 将 Ui 文件 专为 Python 文件</p>
<p>记录一下几个注意事项：</p>
<h2 id="1-环境变量的一些问题">1. 环境变量的一些问题：</h2>
<p>一般来说 <code>pyside2-rcc</code> 这类命令不一定会自动添加到环境变量中，所以需要添加到环境变量或者直接在设置项中选择完整的文件路径，例如我的：</p>
<pre><code class="language-bash">/Library/Frameworks/Python.framework/Versions/3.7/bin/pyside2-rcc
</code></pre>
<p>在 Vs code 中填入即可。</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g882wxli97j30xg0do0te.jpg" alt=""></figure>
<p>类似的 <code>pyside2-uic</code>  也是一样的。</p>
<p>现在 为使用的 是 zsh， 所以配置文件也是在  .zshrc 中，配置文件中一般都会有标示环境变量的。可以直接在里面添加。 如果添加成功那么 直接在终端中输入 <code>pyside2-rcc</code> 是不会报错的。</p>
<p>当然，默认直接在 <code>/usr/bin</code> 目录里面添加添加替身也是可以的。</p>
<h2 id="2-绑定-designer-软件的注意事项">2. 绑定 Designer 软件的注意事项</h2>
<p>如果使用 Ui 文件来创建用户界面，那么可能需要通过 Qt Designer 来修改文件。</p>
<p>一个 mac OS 的常识，应用程序都是以 <code>.app</code> 结尾的 「文件夹」 所以在 VScode 中添加的路径不能是一个文件夹，需要是一个可执行文件。</p>
<p>右键显示包内容，然后在 <code>/Contents/MacOS</code> 里面就能看到可执行文件了。需要添加的是这个可执行文件的路径。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 的入门「指北」]]></title>
        <id>https://hwang.top/post/docker-de-ru-men-zhi-bei</id>
        <link href="https://hwang.top/post/docker-de-ru-men-zhi-bei">
        </link>
        <updated>2019-10-07T12:21:51.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://beta.sspai.com/post/56893<br>
推荐在少数派阅读</p>
</blockquote>
<p>如果你购买过 VPS 云主机，那么或多或少，你都可能听说过 Docker。如果你从未听说过Docker，那么本文可能能够为你开启新世界。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://beta.sspai.com/post/56893<br>
推荐在少数派阅读</p>
</blockquote>
<p>如果你购买过 VPS 云主机，那么或多或少，你都可能听说过 Docker。如果你从未听说过Docker，那么本文可能能够为你开启新世界。</p>
<!-- more -->
<p>利用Docker，你能够哦非常轻松的部署各类服务，无论是个人云盘（<a href="https://sspai.com/post/55217">Nextcloud：打造属于自己的网盘服务 Docker 版(附带视频</a>）、个人的RSS服务（<a href="https://sspai.com/post/53072">利用 Docker 搭建 Tiny Tiny RSS 服务</a>）、HomeKit 桥接（<a href="https://sspai.com/post/53071">利用 Docker 搭建 HomeKit 智能家居</a>），亦或者搭建一个个人博客（<a href="https://sspai.com/post/36751">使用 Docker 部署 Ghost 教程</a>），甚至是做一个自己的维基百科、自己的社交软件，都能够轻松的实现。</p>
<p>是的，Docker 就好像是 服务器端的「应用商店」，你能够通过Docker，轻松的部署各种属于个人、团队的服务。而现如今，无论是利用各个平台的云主机，还是 树莓派、群晖、威联通等这些物理的服务器主机，甚至是自己废旧的老电脑，都能够很容易的使用上 Docker。</p>
<p>在正式开启前，本文默认读者了解基本的命令行操作，以及了解基本的Linux相关知识，如果您还不了解这些，可以通过 B站 这个 UP 主的视频有所了解：<a href="https://www.bilibili.com/video/av56233347">https://www.bilibili.com/video/av56233347</a></p>
<h2 id="那么开启-docker-之旅吧">那么开启 Docker 之旅吧！</h2>
<p>Docker 可以理解为寄存在主机上的特殊的虚拟机。它利用特殊的虚拟化技术，比一般的虚拟化技术能够更加高效合理的利用资源。一台主机上可以创建众多的容器，这些容器通过特定的方式与主机共享硬件资源，并且访问特定的文件，使用特定的端口。通过 Docker ，一台主机能够运行多种不同的服务。</p>
<h3 id="第一步安装或者启用-docker">第一步，安装或者启用 Docker</h3>
<p>一般来说，Docker 会运行在 Linux 服务器上，无论是哪种发行版本，你都可以非常容易的在搜索引擎中找到其他平台的安装方法。这里我以 Ubuntu 为例：</p>
<pre><code class="language-bash">$ sudo apt update # 先更行一下软件包缓存
$ sudo apt install docker-ce # ce 代表社区版
</code></pre>
<p>接着启动 Docker 服务</p>
<pre><code class="language-bash">$ sudo systemctl enable docker
$ sudo systemctl start docker
</code></pre>
<p>这样，你就可以尝试一下运行 <code>docker</code> 命令了</p>
<pre><code class="language-bash">$ sudo docker run hello-world
</code></pre>
<blockquote>
<p>默认情况下，docker 命令需要使用 <code>root</code> 用户或者在<code>docker</code>组下的用户才能使用（<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯）。也就是说，如果不设置，默认情况下，所有的 <code>docker</code> 命令都需要加 <code>sudo</code>。<br>
一般情况下，你可以创建一个名为  <code>docker</code> 的用户组，再将当前用户加入到 <code>docker</code> 组中，使得操作更为安全。</p>
</blockquote>
<blockquote>
<pre><code class="language-bash">$ sudo groupadd docker #创建 Docker 组。
$ sudo usermod -aG docker $USER #添加当前用户到 docker 用户组中，也可将 $USER 替换为你想加入到 docker 组中的用户。
</code></pre>
</blockquote>
<h3 id="第二步拉取你的第一个-image">第二步，拉取你的第一个 Image</h3>
<p>其实你可以这么理解 Docker，你可以在一个名为 <a href="https://hub.docker.com/">Docker Hub</a> 的网站中，查找Docker 镜像（image），这个过程就好像是在 App Store 中搜索自己需要下载的应用一样。查找完想要下载的镜像后，在终端中输入：</p>
<pre><code class="language-bash">$ docker pull [镜像名称]
</code></pre>
<p>可以拉取镜像的到本地。是的，你就下载了这个应用，只不过是在服务端。当然，一般来说这个过程会比较缓慢，你可以<a href="https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html">替换国内源</a>加速这一过程。</p>
<h3 id="第三步启动你的服务">第三步，启动你的服务</h3>
<p>与一般应用下载打开不同，Docker 的镜像可以重复的被打开成不同的容器。你可以简单的理解为这是「应用双开」，或者说是「应用多开」。我们使用 <code>docker run</code> 命令来启动容器。</p>
<p>这个启动的过程可以是一次性的启动，即直接使用 <code>docker run</code> + 一些列参数的方式启动服务，也可以通过 <code>docker compose</code> 来编排你的项目。由于 compose 会相对专业，本文就不做过多的介绍了，这里只以 <code>docker run</code> 为例作为讲解，以下是常见的参数：</p>
<ol>
<li><code>-d</code> ：正常情况下，启动一个服务区，我们都会让其在后台运行，所以使用参数 <code>-d</code> 来告诉 Docker，在后台默默奉献即可。</li>
<li><code>--name=</code> ：前面已经提到了，你可以对一个 Docker 镜像进行多开操作，所以通过 <code>dockr run -d --name=[你的名字]</code> 的方式，可以指定开启的这个容器的名称，这样在多开的情况下，能够更为方便的进行管理。</li>
<li><code>-p</code> : 指定端口的映射。</li>
</ol>
<p>这里简单讲解一下端口的含义：以用户输入在浏览器中输入<code>www.sspai.com</code> 为例，首先浏览器会通过 DNS 服务器把这个 Url 翻译为 IP 地址，再通过 IP 地址，找到少数派的服务器，再通过端口号确定开启的服务，例如如果你输入的是：<code>https:\\www.sspai.com</code>，那么对应的端口就是 443。端口号就相当于服务器的柜台，同个服务区会有多个柜台提供服务。诸如 <code>http</code> 服务，默认是 <code>80</code> 端口， <code>https</code> 默认是 <code>443</code> 端口，类似的 <code>FTP</code> 服务是 <code>21</code> 等等。 并且<strong>一个端口只能支持一个服务，就是说一个柜台只支持办理一项服务</strong>。</p>
<p>回到 <code>-p</code> 这个参数，<code>-p 8080:80</code> 就是指将 docker 中开启的端口，映射到主机的 <code>8080</code> 端口中。也就是说通过主机的IP地址的<code>8080</code> 端口，可以访问到 docker 容器的<code>80</code> 端口服务。 服务器的 <code>8080</code> 柜台接收到的服务，会发送到容器的<code>80</code>柜台中。是的，容器也相当于是一个服务器，在 Docker 内部，他们之间也是有 IP 地址的说法的，所以容器也是需要开「柜台」来管理服务的。</p>
<p>理解这一步非常重要，和一般的使用应用不同，服务器上的应用就是一直在运行，然后让你去访问的，所以 <code>-p</code> 参数设置不对，可就找不到柜台办理正确的服务器了。例如运行：</p>
<pre><code class="language-bash">$ docker run -d --name=nextcloud_demo -p 8080:80 nextcloud
</code></pre>
<p>那么你可以通过 <code>http://localhost:8080</code> 访问到你的 nextcloud 服务。这里的 <code>loaclhost</code> 指的是在 Docker 服务器上访问。如果你想通过自己的电脑，访问 Docker 服务器上的服务，把 <code>loaclhost</code> 替换为服务器的 IP 地址即可。</p>
<ol start="4">
<li><code>-v</code> ：建立主机于docker容器内的文件关联。通过<code>-v</code> 能够 主机的文件映射到 docker 容器中，例如：</li>
</ol>
<pre><code class="language-bash">$ docker run -d \
-v nextcloud:/var/www/html \
nextcloud
</code></pre>
<p>就是将本地本地文件夹 <code>nextcloud</code> 映射到容器中的 <code>/var/www/html</code> 目录。</p>
<p>这 4 个参数就是docker 最基础也是最常用的参数了。了解了这四个参数，再参照 Docker Hub 下每一个镜像的使用说明，你就可以尽情的拥抱和享受开源社区的各种服务了。</p>
<h2 id="推荐一些好用的-docker-镜像">推荐一些好用的 Docker 镜像</h2>
<p>除了开篇提到的 NextCloud、Tiny Tiny RSS、Ghost 等服务外，还有一些镜像值得尝试：</p>
<ol>
<li><a href="https://hub.docker.com/_/mediawiki">MediaWiki</a>： 和维基百科一样的属于个人或者团队的维基服务。</li>
<li><a href="https://hub.docker.com/r/wekanteam/wekan">Wekan</a>：属于个人或者团队的开源看板应用。参考Trello等服务。</li>
<li><a href="https://hub.docker.com/_/wordpress">WordPress</a>：为人所知的、被广泛使用的、收购了tumblr的博客服务，可以用来搭建个人博客，甚至商用网站。</li>
<li>gitlab、gitea 等 Git 服务：如果有团队代码管理需求，可以使用 Docker 快速部署一个私用的 Git 服务。</li>
</ol>
<h2 id="部署一时爽运维火葬厂">部署一时爽，运维「火葬厂」</h2>
<p>Docker 让服务的安装变得异常容易，但是选择一项服务后，后面的运维才是真正折腾人的地方。</p>
<p>首先是管理容器中，最常使用到：</p>
<pre><code class="language-bash">$ docker ps #查看运行中的容器。
$ docker ps -a #查看所有容器，包括停止的。
$ docker images #查看安裝的镜像
</code></pre>
<p>然后是停止、启动已有的容器：</p>
<pre><code class="language-bash">$ docker stop &lt;容器名称/ID&gt; # 正常停止容器
$ docker start &lt;容器名称/ID&gt; # 启动已有容器
$ docker kill &lt;容器名称/ID&gt; # 强制停止容器
</code></pre>
<p>一般容器运行后，会有一个 ID，用以区分容器，这个ID 一般都是乱序的，所以之前的 <code>--name</code> 参数，能够使你更加方便对容器进行管理。</p>
<p>除此之外，还有就是进入 Docker 容器中，修改一些配置文件：</p>
<pre><code class="language-bash">$ sudo docker exec -it &lt;容器名称/ID&gt; /bin/bash
</code></pre>
<p>就是说你可以通过这个命令，进入到 容器的 <code>bash</code> 中，对容器内进行一些修改。</p>
<p>最后 docker 还有许多其他的命令和方法可供学习。作为当今最受欢迎的容器化解决方案，docker 在业界发光发亮的同时，也为一般用户，「一键」启用某些服务提供了契机。利用开源社区，你可以比以往任何时候都更为容易的实现许多互联网服务的「自给自足」。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang 的低质阅读单 New 2]]></title>
        <id>https://hwang.top/post/hwang-de-di-zhi-yue-du-dan-new-2</id>
        <link href="https://hwang.top/post/hwang-de-di-zhi-yue-du-dan-new-2">
        </link>
        <updated>2019-10-06T07:47:27.000Z</updated>
        <content type="html"><![CDATA[<h6 id="这些文章来自-hwang-的-instapaper-从-rss-微博-微信等地方看到觉得自己应该仔细看看的文章收集进-instapaper-归档这些文章后才会出现这里-故而主观又缺乏时效性-很遗憾没有帮到你们">这些文章来自 Hwang 的 Instapaper 。从 RSS、微博、微信等地方看到，觉得自己应该仔细看看的文章，收集进 Instapaper ，归档这些文章后，才会出现这里。故而，主观又缺乏时效性。很遗憾没有帮到你们。</h6>
<ul>
<li><a href="https://jonuknownothingsnow.github.io/2019/04/13/%E8%B0%90%E9%97%A8%E6%AD%A6%E5%AD%A6%EF%BC%9A%E4%BD%BF%E7%94%A8JupyterHub%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8E%A7%E5%88%B6%E5%8F%B0/index.html"> 谐门武学：使用JupyterHub搭建多用户数据控制台</a></li>
<li><a href="https://ift.tt/2mGOpv0"> 使用 Python 函数进行模块化</a></li>
<li><a href="https://ift.tt/2mLmHxh"> 约定式提交</a></li>
<li><a href="https://ift.tt/2NRTWeO"> PyQt5 tutorial - Python GUI programming examples - Like Geeks</a></li>
<li><a href="https://ift.tt/2zphOwJ"> 为什么你的SaaS会“失败”？_36氪</a></li>
<li><a href="https://ift.tt/2LL5u0F"> 香港：（曾经的）实践中有限政府的最好例子</a></li>
<li><a href="https://ift.tt/30Ikele"> 12条经验，让你在机器学习的路上避免很多坑</a></li>
<li><a href="https://ift.tt/2Yi3L6P"> 苹果不再需要 Jony Ive</a></li>
<li><a href="https://ift.tt/2LVP077"> Qt for Python &amp; PyInstaller — Qt for Python</a></li>
<li><a href="https://ift.tt/2LMRZgT"> 整容的人越来越年轻了，自拍是罪魁祸首</a></li>
<li><a href="https://ift.tt/2OnjbF0"> 刘林平 | 规律与因果：大数据对社会科学研究冲击之反思</a></li>
<li><a href="https://ift.tt/32WXsro"> 组策略应用——安装软件-Rainy`s IT Tech Blog-51CTO博客</a></li>
<li><a href="https://ift.tt/3209O1C"> PyQt 5信号与槽的几种高级玩法 - 博文视点</a></li>
<li><a href="https://ift.tt/2Vcqsc0"> Python 工匠：使用数字与字符串的技巧</a></li>
<li><a href="https://ift.tt/2LLMTBK"> 5代防火墙 -- 网络系统 -- IT技术博客大学习 -- 共学习 共进步！</a></li>
<li><a href="https://ift.tt/2OmMI1e"> 我的书桌——先砸一块砖</a></li>
<li><a href="https://ift.tt/2APiRXf"> 漫话中文自动分词和语义识别（下）：句法结构和语义结构 -- 算法 -- IT技术博客大学习 -- 共学习 共进步！</a></li>
<li><a href="https://ift.tt/34qeNur"> Type is Beautiful » 孔雀计划：中文字体排印的思路</a></li>
<li><a href="https://ift.tt/2MeDdP1"> 简明Vim练级攻略 -- Linux -- IT技术博客大学习 -- 共学习 共进步！</a></li>
<li><a href="https://ift.tt/2pNiASF"> 数据科学入门后，该做什么？</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qt for Python 的小Tips —— 外部加载 QSS]]></title>
        <id>https://hwang.top/post/qt-for-python-de-xiao-tips-wai-bu-jia-zai-qss</id>
        <link href="https://hwang.top/post/qt-for-python-de-xiao-tips-wai-bu-jia-zai-qss">
        </link>
        <updated>2019-10-06T07:37:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="pyqt5pyside2-加载-qss-文件">PyQt5/PySide2 —— 加载 QSS 文件</h2>
<pre><code class="language-python">class beautifyUI(object):
    def __init__(self):
        pass
    def readQss(self, qssfile):
        &quot;&quot;&quot;
        加载 QSS 文件；
        qssfile：qss文件路径；
        &quot;&quot;&quot;
        with open(qssfile, &quot;r&quot;) as f:
            return f.read()   
</code></pre>
<p>定义一个函数，基本上就可以通过这个 读取 QSS 作为字符串，然后存为变量，读取进去就OK了。</p>
<p>当然这个文件在打包时也要特殊处理：要么作为字符串储存于某个变量中，要么直接在特定目录下去读取这个文件。在mac的应用打包中，格外需要注意这点。请尽量使用绝对路径记录信息。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qt for Python 的小 Tips - 不显示软件的「大下巴」— QStatus]]></title>
        <id>https://hwang.top/post/qt-for-python-bu-xian-shi-ruan-jian-de-da-xia-ba-qstatus</id>
        <link href="https://hwang.top/post/qt-for-python-bu-xian-shi-ruan-jian-de-da-xia-ba-qstatus">
        </link>
        <updated>2019-10-06T07:35:37.000Z</updated>
        <content type="html"><![CDATA[<p>这里设置 软件的底部信息栏，PySide 中称为 QStatusbar。</p>
<p>利用 QT Creator 生成的 mainWindows 软件会自动添加该部件。如果不需要底部状态栏，注释掉就可以了。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/10/06/3iQ5fJxY1rZNEgb.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Procreate 练习]]></title>
        <id>https://hwang.top/post/procreate-lian-xi</id>
        <link href="https://hwang.top/post/procreate-lian-xi">
        </link>
        <updated>2019-10-01T12:17:19.000Z</updated>
        <content type="html"><![CDATA[<p>画图，画图。</p>
<p>好久没有动笔了。线条画的一点都不流畅了。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/10/01/xwQ8BVtOInGfvW7.png" alt="IMG_0404.PNG"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Update 了一下 figma 的封面]]></title>
        <id>https://hwang.top/post/update-liao-yi-xia-figma-de-feng-mian</id>
        <link href="https://hwang.top/post/update-liao-yi-xia-figma-de-feng-mian">
        </link>
        <updated>2019-09-30T10:00:58.000Z</updated>
        <content type="html"><![CDATA[<p>更新了一下figma的封面：<br>
<img src="https://hwang.top/post-images/1569837778140.png" alt=""></p>
]]></content>
    </entry>
</feed>