<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hwang.top</id>
    <title>Hwang&apos;s Blog</title>
    <updated>2020-01-09T14:12:58.338Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hwang.top"/>
    <link rel="self" href="https://hwang.top/atom.xml"/>
    <subtitle>欢迎来到 Hwang 的小博客 &lt;br&gt;
这显然不是什么技术博客，也不会有太多值得期待的干货。&lt;br&gt;</subtitle>
    <logo>https://hwang.top/images/avatar.png</logo>
    <icon>https://hwang.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Hwang&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Election 初试]]></title>
        <id>https://hwang.top/post/election-chu-shi</id>
        <link href="https://hwang.top/post/election-chu-shi">
        </link>
        <updated>2020-01-05T06:51:33.000Z</updated>
        <summary type="html"><![CDATA[<p>之前做的上传工具，打算用 election 改做了。原先的使用 Pyside2 写的，软件写起来没什么问题，用起来也很舒服，但是打包的话就相对比较麻烦了，各种坑，Windows 可能还勉强能够应付一下，但是mac 版的资料属实能够找到的资料也不够多。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前做的上传工具，打算用 election 改做了。原先的使用 Pyside2 写的，软件写起来没什么问题，用起来也很舒服，但是打包的话就相对比较麻烦了，各种坑，Windows 可能还勉强能够应付一下，但是mac 版的资料属实能够找到的资料也不够多。</p>
<!-- more -->
<p>选择前 election 主要是我司目前是有前端开发的，这样后续产品也能接上。</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1galosj37orj30qc0zcmz2.jpg" alt="" loading="lazy"></figure>
<h2 id="试试-election-的样例">试试 election 的样例</h2>
<p>clone了项目后，直接用：</p>
<pre><code class="language-bash">$ npm install
</code></pre>
<p>结果中间就卡住了，没有继续下载；大概是卡在 core-js 这个包的安装时候。</p>
<p>强制停止，然后删除 node-model 文件，再修改代理：</p>
<pre><code class="language-bash">$ npm config set registry https://registry.npm.taobao.org
</code></pre>
<p>然后在安装：</p>
<pre><code class="language-bash">$ npm install
</code></pre>
<p>嘿，好家伙，直接显示两个包没下。看了下还是 core-js；所以就只能用 cnpm 了。<br>
下载 cnpm：</p>
<pre><code class="language-bash">$ npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre>
<p>然后使用 cnpm：</p>
<pre><code class="language-bash">$ cnpm install
$ cnpm start
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1galosd3plcj312f0u0q87.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 06]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-06</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-06">
        </link>
        <updated>2019-12-29T09:37:24.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
<p><a href="https://ift.tt/2wAchiQ">真正提高效率：自定义你的 Touch Bar</a></p>
<blockquote>
<p>自 2016 年 Touch Bar 在 MacBook Pro 上问世以来，对其最大的争议就是它并不能很好地提高用户的工作效率：Touch Bar 提供的大多数功能很容易使用键盘快捷键来实现，并且有些时候使用快捷键更加方便、符合直觉。</p>
</blockquote>
<p><a href="https://ift.tt/2vu6nnM">聊聊 GFW 如何封杀 Resilio Sync（BTSync）？以及如何【免翻墙】继续使用？</a></p>
<blockquote>
<p>★引子    　　最近一个多月，有好些读者抱怨 Resilio Sync（原名叫做“BitTorrent Sync”，简称“BTsync”）无法正常使用。所以俺一直打算写一篇来谈谈这个事情。顺便也分享一下：如何继续【免翻墙】使用 Resilio Sync。</p>
</blockquote>
<p><a href="https://ift.tt/2shD7uP">第四范式戴文渊：机器写出1000万条以上规则，就超越了专家</a></p>
<blockquote>
<p>为你推送和解读最前沿、最有料的科技创投资讯</p>
</blockquote>
<p><a href="https://ift.tt/2vFF0pi">培养大脑记忆力的第二次机会：「记忆神器」Anki 使用详解</a></p>
<blockquote>
<p>阅读建议：本文基于 Anki for Mac，可以在 Anki 中国 上免费下载；本文涉及众多新概念，建议在 Anki 中国 下载一个共享的牌组，尝试文中提到的一些概念和操作。</p>
</blockquote>
<p><a href="https://ift.tt/2pe0Uxy">用 Ai Search 和 Drafts 实现 Alfred 的搜索体验</a></p>
<blockquote>
<p>这篇文章主要探讨的是一种结合 Ai Search 和 Drafts 进行快速网站搜索的方法。Ai Search 扮演的是一个搜索引擎库，而 Drafts 是提高调用搜索引擎效率的工具。文中方法的关键点在于键盘输入，搜索内容和选择搜索引擎的操作都可以</p>
</blockquote>
<p><a href="https://ift.tt/2mkTdDj">强大如怪物：顶级文本处理应用 Drafts 4 深度评测</a></p>
<blockquote>
<p>虽然此前购买过旧版本的 Drafts，但在拿到手上最新版本的 Drafts 4 前，其实我并没有怎么好好使用它。倒并不是因为它不好用，而是因为它和另外一款相似的应用 Editorial 在我心里一直是两款「怪物」一般的文本输入类应用。因</p>
</blockquote>
<p><a href="https://ift.tt/2OUQnnl">这个在线协作工具，什么都能画</a></p>
<blockquote>
<p>Matrix 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>
</blockquote>
<p><a href="https://ift.tt/2Qj3I80">企业微信3.0发布会，都讲了些什么？</a></p>
<blockquote>
<p>通过邹叔在现场拍的两张照片来看，企业微信最重要的改变就是：从拉新变成沉淀，从2B工具变成了帮助企业2C的工具。</p>
</blockquote>
<p><a href="https://ift.tt/2QiXkhb">克洛普的圣诞致辞：作为最幸运的红军人，这是骄傲难忘的一年</a></p>
<blockquote>
<p>编者按：如往年一样，克洛普在圣诞节当天于利物浦官方发表了他的圣诞致辞，让我们来看看渣叔如何向大家分享这一年的感受。</p>
</blockquote>
<p><a href="https://ift.tt/2PxUqpP">Mac Pro 2019 Teardown</a></p>
<blockquote>
<p>Teardown of the reinvented 2019 Mac Pro, which returns to a properly repairable design that happens to not grate cheese very well. Performed December 2019.</p>
</blockquote>
<p><a href="https://ift.tt/34AWiSX">2019：“暗黑”的一年</a></p>
<blockquote>
<p>昨天，微信开放了安卓平台 7.0.10 版本的内部测试。安装之后，可以看到的一些小变化是多选信息、查看图片、视频等界面的微调。</p>
</blockquote>
<p><a href="https://ift.tt/2S4U9fC">Flypig | 自媒体时代的 “非虚构” 人生</a></p>
<blockquote>
<p>微信号 DAZED_CHINA 功能介绍 《DAZED》杂志官方公众号。微博：@DazedChina 。 Hannah——舌尖后缩，轻触上颚然后落下，H-a-n-n-a-h，倒过来念也是如此。这是电影《降临》（Arrival, 2017）中语言学家Louise女儿的名字，故事的结尾又回到了</p>
</blockquote>
<p><a href="https://ift.tt/2LP8oB7">杭州</a></p>
<blockquote>
<p>杭州是上海边上的一座城，说它“美丽”不足以形容它的风貌，说它“最适合人居住”又会让人误以为它房价便宜，所以很难找出一个词来概括它。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 05]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-05</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-05">
        </link>
        <updated>2019-12-22T12:31:36.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>最近真就没怎么更新博客...<br>
注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>最近真就没怎么更新博客...<br>
注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
<!-- more -->
<p><a href="https://ift.tt/2qsSNzG">基于QTdesigner的PyQt编程</a> \</p>
<blockquote>
<p>前面的教程中有讲过对于python自带的Tk模块的使用，实际上个人感觉Tk的使用不仅繁琐，而且做出来的界面并不美观，这里向大家推荐pyqt。 qyqt这个模块的最大优势在于界面可以使用qtdesigner直观的制作，然后代码直接读取就可以</p>
</blockquote>
<p><a href="https://ift.tt/2Na0inF">Kindle 十二岁</a> \</p>
<blockquote>
<p>两个多星期后的十一月十九日，就是 Kindle 的正式十二岁生日。正版电子书发展至今，对于我这种不住在英语国家但要看英文书的人带来了许多便利，但它在排版上依然远远劣于盗版 PDF（即远未达到平面出版的排版水平）。</p>
</blockquote>
<p><a href="https://ift.tt/2rBrG5D">知料 | 越薄越好？噼里啪啦的键盘是怎么成为苹果绊脚石的</a> \</p>
<blockquote>
<p>蝶形键盘失败了，这一苹果曾力推的全新设计，在短暂四年后便狼狈退场。</p>
</blockquote>
<p><a href="https://ift.tt/34tr155">极圈化</a> \</p>
<blockquote>
<p>不知道从什么时候开始，阶层固化、鄙视链定序、圈内刻奇成了舆论热点的源头，这一部分是商业社会价格歧视的结果，一部分是分工后专业化的信息壁垒，另一部分则是本质上人群价值观割裂后产生的信息不对称与隔离。</p>
</blockquote>
<p><a href="https://ift.tt/36l1prv">我推荐的 RSS 订阅列表</a> \</p>
<blockquote>
<p>每次推荐 RSS 阅读器，总有人条件反射地说「现在谁还用那个！」，令人生厌。但另一个条件反射式的反应非常合理：就算我装了 RSS 阅读器，里面一片空白，我该订什么呢？</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派、Windows 设备都可以做你 Mac 的「时间机器」——利用 SMB 协议进行 Time Machine 备份]]></title>
        <id>https://hwang.top/post/shu-mei-pai-windows-she-bei-du-ke-yi-zuo-ni-mac-de-shi-jian-ji-qi-li-yong-smb-xie-yi-jin-xing-time-machine-bei-fen</id>
        <link href="https://hwang.top/post/shu-mei-pai-windows-she-bei-du-ke-yi-zuo-ni-mac-de-shi-jian-ji-qi-li-yong-smb-xie-yi-jin-xing-time-machine-bei-fen">
        </link>
        <updated>2019-12-02T13:56:12.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://sspai.com/post/57539<br>
推荐在少数派阅读</p>
</blockquote>
<p>macOS 为用户提供了便捷的系统备份功能：Time Machine （你可以从少数派2015年的老文中学习使用这个功能：<a href="https://sspai.com/post/30550">Time Machine 使用教程</a> ）。</p>
<p>一般而言，Time Machine 需要你连接一块硬盘到你的 Mac 上才能够启动。当然，你可以通过「有线连接」和「无线连接」的方式，进行备份。有线连接不再赘述，可以参考上面的教程。而无线连接，少数派上同样可以参考：<a href="https://sspai.com/post/48372">把群晖 NAS 变成「时间返回舱」，轻松搞定 Time Machine 无线备份</a>，而本文将介绍除了使用 NAS 以外，你还可以在任何能够使用 SMB 协议的设备上创建你的「时间机器」。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://sspai.com/post/57539<br>
推荐在少数派阅读</p>
</blockquote>
<p>macOS 为用户提供了便捷的系统备份功能：Time Machine （你可以从少数派2015年的老文中学习使用这个功能：<a href="https://sspai.com/post/30550">Time Machine 使用教程</a> ）。</p>
<p>一般而言，Time Machine 需要你连接一块硬盘到你的 Mac 上才能够启动。当然，你可以通过「有线连接」和「无线连接」的方式，进行备份。有线连接不再赘述，可以参考上面的教程。而无线连接，少数派上同样可以参考：<a href="https://sspai.com/post/48372">把群晖 NAS 变成「时间返回舱」，轻松搞定 Time Machine 无线备份</a>，而本文将介绍除了使用 NAS 以外，你还可以在任何能够使用 SMB 协议的设备上创建你的「时间机器」。</p>
<!-- more -->
<p>首先，SMB 协议是一种能够将本机电脑上的文件夹分享到局域网内其他设备上的一种协议。你可以简单的理解为是一种文件共享的协议。我们要做的就是通过这个协议，将主机上的某个文件共享到你的 Mac 上，然后在那上面创建备份。所以，我们需要的具体步骤就是：1. 通过 SMB 分享一个文件夹； 2. 在 Mac 上加载这个文件夹；3. 利用这个文件夹创建备份。</p>
<h2 id="1-通过-smb-分享一个文件夹">1. 通过 SMB 分享一个文件夹</h2>
<p>这一步，我们需要做的事，具体而言就是：</p>
<ol>
<li>开启 SMB 服务；</li>
<li>配置一个文件夹进行共享；<br>
所以，正如标题里写的，无论是树莓派这种 Linux 设备，还是 Windows 设备，你都可以开启 SMB 服务，进行局域网内的文件的共享。所以，如果你有一台 Linux 设备，你可以参考下面的树莓派的步骤，如果你有一台 Windows 设备，可以参考 Windows 的步骤。</li>
</ol>
<h3 id="树莓派上开启-smb-服务">树莓派上开启 SMB 服务</h3>
<p>详细内容，同样可以参考我派的文章：<a href="https://sspai.com/post/40721">利用 Samba - 像管理本地文件一样处理树莓派文件</a>。<br>
首先，更新源：</p>
<pre><code class="language-bash">$ sudo apt-get update
</code></pre>
<p>第二步，安装 samba 服务：</p>
<pre><code class="language-bash">$ sudo apt-get install samba samba-common-bin
</code></pre>
<p>第三步，修改 SMB 的配置，这里使用 vim 进行编辑：</p>
<pre><code class="language-bash">$ sudo vim /etc/samba/smb.conf
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz0w5huj31040pyjwx.jpg" alt="" loading="lazy"></figure>
<p>在配置文件的最后添加：</p>
<pre><code class="language-bash">[pi]

    path = /home/pi/

    valid users = pi

    browseable = Yes

    writeable = Yes

    writelist = pi

    create mask = 0777

    directory mask = 0777
</code></pre>
<p>保存退出后，重启一下 samba 服务</p>
<pre><code class="language-bash">$ sudo /etc/init.d/samba restart
</code></pre>
<p>最后一步，就是添加 <code>pi</code> 用户为 <code>Samba</code>用户，这一步，会让你设置共享时的密码。</p>
<pre><code class="language-bash">$ sudo smbpasswd -a pi
</code></pre>
<h3 id="windows-上开启-smb-服务">Windows 上开启 SMB 服务</h3>
<p>Windows 上做 Smb 共享会方便很多，首先在一个磁盘空间比较富裕的地方，创建一个文件夹，然后右键，属性，打开「共享」栏：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz1iym9j30rq10ygnz.jpg" alt="" loading="lazy"><br>
然后点击共享，弹出用户设置界面：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz2hyj9j30zc0sw0uj.jpg" alt="" loading="lazy"></p>
<p>设置共享的账户，以及权限设置为「读和写」，一般而言推荐在这里新建一个专门的共享账户，账户和密码就是届时需要在mac上输入的账户和密码：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz3finaj30zk0sijt1.jpg" alt="" loading="lazy"></p>
<p>账户设置完成后，点击「共享」即可：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz4ezluj30zs0s6gn7.jpg" alt="" loading="lazy"></p>
<p>点击完成，这个文件就已经能够在局域网访问了。这里做个简单的提醒，部分Windows设备的防火墙设置，会禁用共享，可以先通过关闭防火墙的方式来排除是不是防火墙的问题，再通过对应规则的设置，重新开启防火墙即可。</p>
<h2 id="2-在-mac-上加载这个文件夹">2. 在 Mac 上加载这个文件夹</h2>
<p>这个时候，打开你的 finder，应该能够在「位置这一栏」下看到树莓派，或者你的 Windows 设备的名字了。点击后，就能看到你共享的文件夹了。</p>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz5b6e2j31ca0u0n9m.jpg" alt="" loading="lazy"></figure>
<p>如果没有看到，那么通过右键 finder 图标，点击「连接服务器」，输入：<code>smb://设备的IP地址/共享的文件夹名称</code> 的方式连接，在输入账号密码后，也能够连接上这个文件夹。正确连接后，就说明，其他设备上的硬盘，已经能够为你的 Mac 所用了。</p>
<p>接下来我们就要进行最后一个步骤，创建一个「时间机器」了！</p>
<h2 id="3-利用这个文件夹创建备份">3. 利用这个文件夹创建备份</h2>
<p>当你兴奋的打开你的 Time Machine 设置，点击「选择备份磁盘」时，看到却是：</p>
<p><img src="%E6%88%AA%E5%B1%8F2019-11-18%E4%B8%8A%E5%8D%889.09.15.png" alt="" loading="lazy"><br>
<em>是的，并没有你想要的那个文件夹</em></p>
<p>接下来，我们要做的，其实是创建一个磁盘镜像文件，然后将这个磁盘镜像文件挂载到你的 Mac 上，作为一个「虚拟硬盘」，然后利用这个「虚拟硬盘」进行备份。具体的：</p>
<h3 id="31-创建一个空白映像">3.1 创建一个空白映像：</h3>
<p>打开「磁盘工具」，选择菜单栏中的 「新建映像」，选择「空白映像…」，然后如图所示，填入信息：<br>
<img src="%E6%88%AA%E5%B1%8F2019-11-23%E4%B8%8B%E5%8D%885.31.56.png" alt="" loading="lazy"><br>
其中「大小」可以根据你实际需求来填写<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p>
<h3 id="32-将此这个空白映像拷贝到你的-smb-共享文件夹中">3.2 将此这个空白映像拷贝到你的 SMB 共享文件夹中：</h3>
<p>在 finder 中先推出这个磁盘，然后在保存的位置中，将这个磁盘文件拖入 SMB 共享文件夹的对应位置：</p>
<h3 id="33-挂载这个磁盘">3.3 挂载这个磁盘</h3>
<p>双击在 SMB 共享文件夹中的这个映像文件，然后他就会挂在在你的 Mac 上：</p>
<figure data-type="image" tabindex="3"><img src="%E6%88%AA%E5%B1%8F2019-11-23%E4%B8%8B%E5%8D%885.39.50.png" alt="" loading="lazy"></figure>
<p>最后，通过 terminal 将这个磁盘设置为 TimeMachine 的备份磁盘：</p>
<pre><code class="language-bash">$sudo tmutil setdestination /Volumes/TimeMachine
</code></pre>
<p>这里的 <code>/Volumes/TimeMachine</code> 就是这个磁盘的挂载点，一般而言就是 <code>/Volumes/</code> + 磁盘的名称，如果你不是很确定，可以在磁盘工具中，选择这个磁盘，点击右键，选择「显示简介」，看到挂载信息：<br>
<img src="%E6%88%AA%E5%B1%8F2019-11-23%E4%B8%8B%E5%8D%885.44.41.png" alt="" loading="lazy"></p>
<p>输入完命令后，再输入你的Mac密码，即可成功挂载。当你再次打开 TimeMachine 时，已经可以开始备份了。</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz69tdej316e0u0dsk.jpg" alt="" loading="lazy"></figure>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>一个400GB的空白磁盘映像，大概有400MB <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker-compose 的使用（一）]]></title>
        <id>https://hwang.top/post/docker-compose-de-shi-yong-yi</id>
        <link href="https://hwang.top/post/docker-compose-de-shi-yong-yi">
        </link>
        <updated>2019-12-02T13:45:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文件目录">文件目录</h2>
<p>在一个 文件夹下，我这里是 Docker</p>
<pre><code class="language-bash">├── docker-compose.yml
├── gitlab
└── nginx
    └── conf.d
</code></pre>
<p>其中 <code>gitlab</code>，是直接在shell脚本中运行的，不是使用 <code>docker-compose</code>的方式进行管理的，就以启动一个 nginx 为例：</p>
<pre><code class="language-yaml">version: '3.4' #版本号
services:
  web:
    image: nginx
    container_name: web_nginx
    restart: always
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - 80:80
</code></pre>
<p>一般来说一份标准配置文件应该包含 version、services、networks （可选）、volumes（可选）</p>
<h3 id="首先是-version">首先是 Version</h3>
<p>Version 3 支持多机和单机，而2仅支持单机。版本1已经废弃了。推荐直接用3及以上版本</p>
<h3 id="其次是-services">其次是 Services</h3>
<p>就是服务主体，这里设置了一个 nignx ，名称是 web，然后 是声明 <code>image</code> 是 nginx，这个<code>image</code> 通过 <code>docker pull nginx</code>拉取。接着是 <code>container_name</code>，定义这个容器名称，这样方便通过docker 命令进行直接的管理，然后是 <code>restart:always</code>，表明自动重启。之后是 <code>volumns</code> 相当于docker 命令中的<code>-v</code>参数，用于做容器内的和宿主机的映射。最后是 <code>ports</code> ，端口映射。这样就OK了。</p>
<h2 id="利用-docker-compose-进行管理">利用 docker-compose 进行管理</h2>
<p>通过以下命令运行：</p>
<pre><code class="language-yaml">$ docker-compose up -d 
</code></pre>
<p>其中 <code>-d</code> 表示在后台运行。</p>
<p>如果需要重启服务可以通过：</p>
<pre><code class="language-yaml">$ docker-compose restart web
</code></pre>
<p>这里的<code>web</code> 就是 services 的名称。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 04]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-04</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-04">
        </link>
        <updated>2019-11-17T05:27:34.000Z</updated>
        <summary type="html"><![CDATA[<h6 id="这些文章来自-hwang-的-instapaper-pocket-从-rss-微博-微信等地方看到觉得自己应该仔细看看的文章收集进-instapaper-pocket归档这些文章后才会出现这里-故而主观又缺乏时效性-很遗憾没有帮到你们">这些文章来自 Hwang 的 <s>Instapaper</s> Pocket。从 RSS、微博、微信等地方看到，觉得自己应该仔细看看的文章，收集进 <s>Instapaper</s> Pocket，归档这些文章后，才会出现这里。故而，主观又缺乏时效性。很遗憾没有帮到你们。</h6>
]]></summary>
        <content type="html"><![CDATA[<h6 id="这些文章来自-hwang-的-instapaper-pocket-从-rss-微博-微信等地方看到觉得自己应该仔细看看的文章收集进-instapaper-pocket归档这些文章后才会出现这里-故而主观又缺乏时效性-很遗憾没有帮到你们">这些文章来自 Hwang 的 <s>Instapaper</s> Pocket。从 RSS、微博、微信等地方看到，觉得自己应该仔细看看的文章，收集进 <s>Instapaper</s> Pocket，归档这些文章后，才会出现这里。故而，主观又缺乏时效性。很遗憾没有帮到你们。</h6>
<!-- more -->
<p><a href="https://ift.tt/2PGVIPs">“肉腿”是怎么火起来的？ | 机核 GCORES</a> &gt; 本文系用户投稿，不代表机核网观点 文/沉迷真扎的白 相信这几天不少胖友们的微博首页和我一样，被拥有着一双肉腿的可爱女孩子形象刷屏了。这名女孩子就是9月26日发售的游戏《莱莎的炼金工房》中的女主角莱莎 。作为光<br>
<a href="https://ift.tt/2J4d7xJ">Windows Terminal 食用指南</a> &gt; 自今年微软开发者大会 Build 2019 中首次亮相以来，经历了近半年的发展，万众瞩目的 Windows Terminal 已经日趋成熟。从十月份开始，我将其作为主力终端使用了一段时间，暂时还没遇到什么严重的问题。<br>
<a href="https://ift.tt/2PbJcHp">浅谈 Python 中的闭包与中间件封装</a> &gt; 这两天看了一些中间件框架相关的代码，发现闭包的应用很多，由于之前对闭包这个概念似懂非懂，所以我借此机会学习了一番，然后把成果在此总结记录一下。<br>
<a href="https://ift.tt/2rDa08n">Editorial：除了写作，我还兼职 Workflow</a> &gt; 当今 iOS 端 Markdown 写作软件基本由 Ulysses、Bear、Drafts 等明星软件把持，有的功能纯粹，有的界面优雅，但要说到功能强大、扩展强就要数今天的主角 Editorial 了，这是一款被严重低估的软件。当深度使用过后，不禁感叹，这货<br>
<a href="https://ift.tt/2CGrvsn">DataWorks高级功能场景化案例分享</a> &gt; 自2009年DataWorks立项，伴随着阿里巴巴集团登月计划、公共云和专有云的发布，直到2018年V2.<br>
<a href="https://ift.tt/2JS2gXQ">GQ报道 | 幸存者李佳琦：一个人变成算法，又想回到人</a> &gt; 功能介绍 记录人物的浮沉和时代价值的变迁。全面、真实、深入、准确的非虚构故事，每周为您送上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[划重点 ｜ 经济学，学Python 需要学哪些内容？—— 爬虫相关的必知必会的那些知识]]></title>
        <id>https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-pa-chong-xiang-guan-de-bi-zhi-bi-hui-de-na-xie-zhi-shi</id>
        <link href="https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-pa-chong-xiang-guan-de-bi-zhi-bi-hui-de-na-xie-zhi-shi">
        </link>
        <updated>2019-11-11T03:53:49.000Z</updated>
        <summary type="html"><![CDATA[<p>经济学的数据来源，一直都是以调查数据和统计数据为主，Python 这门易学易用的语言的出现拓宽了数据来源的边界。 Python  能够通过几行代码就能获取在网络中存在的各种数据，再利用前文《划重点 ｜ 经济学，学Python 需要学哪些内容？——数据分析处理 化必知必会的知识点》提到的数据处理的相关知识，能够便捷的结构化数据，为实证分析提供强有力的支持。</p>
]]></summary>
        <content type="html"><![CDATA[<p>经济学的数据来源，一直都是以调查数据和统计数据为主，Python 这门易学易用的语言的出现拓宽了数据来源的边界。 Python  能够通过几行代码就能获取在网络中存在的各种数据，再利用前文《划重点 ｜ 经济学，学Python 需要学哪些内容？——数据分析处理 化必知必会的知识点》提到的数据处理的相关知识，能够便捷的结构化数据，为实证分析提供强有力的支持。</p>
<!-- more -->
<p>利用 Python 获取网页中的信息，就是所谓的爬虫。而越来越多经济学专业的学生也被导师“要求”学习 Python 以及爬虫的技巧。那么对于经济学学生来说，学习 Python 来爬虫，到底需要学习哪些知识呢？</p>
<h2 id="1-html-了解网页的基础知道爬取的对象是什么">1. HTML ：了解网页的基础，知道爬取的对象是什么</h2>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t44ozzm4j32700fyju2.jpg" alt="" loading="lazy"></figure>
<p>现如今，我们已经习惯了打开浏览器查看各式各样的网络内容，而浏览器中所出现的所有内容，都可以简单概括为 HTML+ CSS+Javascript，其中 HTML 用于储存网页内容，CSS 用于储存网页的样式，Javascript 负责网页的交互。所以，要获取数据，就必须要对 HTML 下手。</p>
<p>学习和了解 HTML 成为了必不可少的知识。当然，你也无需担心，抱怨“又要学一门新的语言”HTML 是一种标记型语言，所谓标记型语言就类似于：</p>
<h1> Hello HTML </h1>
<p>非常容易理解，<code>&lt;h1&gt;&lt;/h1&gt;</code>就是一个标记，标记里面的内容属于<code>h1</code>，也就是一级标题的意思。不同的标记代表不同的功能比如<code>h2</code> 就代表二级标题，<code>p</code> 就代表正文等等，浏览器根据这个标记去显示内容的样式。所以对于爬取数据来说，只要知道哪个是标记，哪个内容，并且能够找到自己需要的标记在哪个层级的标记下就可以了。</p>
<h2 id="2-浏览器的开发者界面获取网页背后的代码">2. 浏览器的开发者界面：获取网页背后的代码</h2>
<p>学会了HTML，你还需要知道，去哪里看到这些代码。所以，这时候你就需要学习如何使用浏览器的开发者模式了。</p>
<blockquote>
<p>Chrome 浏览器是比较常用的一款能够较好显示网页源码的软件，你可以在界面右上角选择更多工具，然后打开开发者工具：<br>
<img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t45fen5sj30v00u0dit.jpg" alt="" loading="lazy"><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t45nt7j5j31820lgq5d.jpg" alt="" loading="lazy"><br>
打开以后，你就能够看到网页的源代码了。浏览器就是根据这些代码，显示出网页的。</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t459mwl9j31iq0u0h3h.jpg" alt="" loading="lazy"></figure>
<p>总的来说，Chrome 提供了这么几个板块的功能<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：<br>
<img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8t45sfcbkj30rw0280sp.jpg" alt="" loading="lazy"></p>
<ul>
<li>Elements: 允许我们从浏览器的角度看页面，也就是说我们可以看到chrome渲染页面所需要的的HTML、CSS和DOM(Document Object Model)对象。也就是为我们显示源码。</li>
<li>Network: 可以看到页面向服务器请求了哪些资源、资源的大小以及加载资源花费的时间，当然也能看到哪些资源不能成功加载。此外，还可以查看HTTP的请求头，返回内容等；</li>
<li>Resources: 对本地缓存（IndexedDB、Web SQL、Cookie、应用程序缓存、Web Storage）中的数据进行确认及编辑；记录了Cookie等信息，可以用于爬取一些需要登录的网址。</li>
</ul>
<p>以及我们并不常用，但是可以了解一下：</p>
<ul>
<li>Sources: 主要用来调试js；对于我们经济学学生来说，并不那么重要。</li>
<li>Timeline: 提供了加载页面时花费时间的完整分析，所有事件，从下载资源到处理Javascript，计算CSS样式等花费的时间都展示在Timeline中；</li>
<li>Profiles: 分析web应用或者页面的执行时间以及内存使用情况；</li>
<li>Audits: 分析页面加载的过程，进而提供减少页面加载时间、提升响应速度的方案；</li>
<li>Console: 显示各种警告与错误信息，并且提供了shell用来和文档、开发者工具交互。</li>
</ul>
<p>通过这个界面，你就可以获取诸如 Xpath 、Cookie 这些对于爬虫非常重要的信息，学会使用这个工具，对于爬虫来说必不可少。</p>
<h2 id="3-python-的爬虫框架">3. Python 的爬虫框架</h2>
<p>最后，就是使用爬虫框架来进行爬虫，不同框架的上手难度以及自由度个有不同，纵多的爬虫框架，用于处理不同的情况，比较常用的有：</p>
<ul>
<li>
<p>Requests 库<a href="https://requests.kennethreitz.org/en/master/">https://requests.kennethreitz.org/en/master/</a>：适合新手上手的一个爬虫框架，如果你有了一定的 Python 基础，那么先用 request 库上手一般都是没错的。</p>
</li>
<li>
<p>Beautiful Soup <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/">https://beautifulsoup.readthedocs.io/</a>：将网页变为 Soup，然后在Soup中提取HTML内信息的爬虫方案。同样比较容易学习，易于上手。</p>
</li>
<li>
<p>Scrapy<a href="https://scrapy.org/">https://scrapy.org/</a> ：他是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 比较适合结构化数据的提取。</p>
</li>
<li>
<p>Pyspider <a href="https://github.com/binux/pyspider">https://github.com/binux/pyspider</a>：一个带有GUI的爬虫框架，可以在GUI上直接写 爬虫脚本。</p>
</li>
</ul>
<p>除此之外，还有许多不同类型的爬虫框架，大家可以根据自己的需求在网络上简单搜索，就能找到各种不同库的比较，届时选择自己想对能够接受的包即可。</p>
<hr>
<p>以上三部分就是爬虫中需要知道的三大块的知识了，除此之外，你可能还需要一定的网络知识，用于处理爬虫实践中的不同种类的错误。并且，爬虫是一个可以不断深入的领域，不同类型的网站又会有不同的“反爬虫”策略，为了处理这些策略可能会需要用到更多不同的知识，对于经济学专业的学生来说，继续深入可能会有些“得不偿失”了，选取那些爬虫成本更低的网站才符合效用最大化。</p>
<p>所以简单总结，爬虫需要了解HTML的基础知识，然后要学会使用 浏览器开发者模式，查看源码以及网络信息，最后就是选择一个称手的第三包来进行爬虫操作。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>参考：<a href="https://segmentfault.com/a/1190000000683599">https://segmentfault.com/a/1190000000683599</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PySide2/PyQt 在 Windows 中添加对高分屏的支持]]></title>
        <id>https://hwang.top/post/pyside2pyqt-zai-windows-zhong-tian-jia-dui-gao-fen-ping-de-zhi-chi</id>
        <link href="https://hwang.top/post/pyside2pyqt-zai-windows-zhong-tian-jia-dui-gao-fen-ping-de-zhi-chi">
        </link>
        <updated>2019-11-05T12:24:10.000Z</updated>
        <summary type="html"><![CDATA[<p>Qt 当中有一个类是 QSize，用于标识组件的尺寸，那么是不是应该能够做到自适应高分屏呢？</p>
<p>本着大胆猜测小心求证的心态，去网上看来一圈。许多教程都是让你获取当前分辨率，然后再设置界面缩放的。这么做也不是不行，但是总感觉不应该是这样的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Qt 当中有一个类是 QSize，用于标识组件的尺寸，那么是不是应该能够做到自适应高分屏呢？</p>
<p>本着大胆猜测小心求证的心态，去网上看来一圈。许多教程都是让你获取当前分辨率，然后再设置界面缩放的。这么做也不是不行，但是总感觉不应该是这样的。</p>
<!-- more -->
<p>直到在<a href="https://doc.qt.io/qtforpython/PySide2/QtCore/Qt.html?highlight=applicationattribute#PySide2.QtCore.PySide2.QtCore.Qt.ApplicationAttribute">QtCore</a>下面找到了：</p>
<table>
<thead>
<tr>
<th>Qt.AA_UseHighDpiPixmaps</th>
<th>Make <code>pixmap()</code> generate high-dpi pixmaps that can be larger than the requested size. Such pixmaps will have <code>devicePixelRatio()</code> set to a value higher than 1. After setting this attribute, application code that uses pixmap sizes in layout geometry calculations should typically divide by <code>devicePixelRatio()</code> to get device-independent layout geometry.</th>
</tr>
</thead>
<tbody>
<tr>
<td>Qt.AA_EnableHighDpiScaling</td>
<td>Enables high-DPI scaling in Qt on supported platforms (see also High DPI Displays). Supported platforms are X11, Windows and Android. Enabling makes Qt scale the main (device independent) coordinate system according to display scale factors provided by the operating system. This corresponds to setting the QT_AUTO_SCREEN_SCALE_FACTOR environment variable to 1. This attribute must be set before <a href="https://doc.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html#PySide2.QtGui.QGuiApplication"><code>QGuiApplication</code></a> is constructed. This value was added in Qt 5.6.</td>
</tr>
<tr>
<td>Qt.AA_DisableHighDpiScaling</td>
<td>Disables high-DPI scaling in Qt, exposing window system coordinates. Note that the window system may do its own scaling, so this does not guarantee that <code>devicePixelRatio()</code> will be equal to 1. In addition, scale factors set by QT_SCALE_FACTOR will not be affected. This corresponds to setting the QT_AUTO_SCREEN_SCALE_FACTOR environment variable to 0. This attribute must be set before <a href="https://doc.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html#PySide2.QtGui.QGuiApplication"><code>QGuiApplication</code></a> is constructed. This value was added in Qt 5.6.</td>
</tr>
</tbody>
</table>
<p><code>AA_</code> 前缀表示，是ApplicationAttribute。</p>
<p>其中的<code>Qt.AA_EnableHighDpiScaling</code> 里面明确写了：</p>
<blockquote>
<p>support platforms are x11, Windows , Android</p>
</blockquote>
<p>并且说明了这个设置项必须在 <code>QGuiApplication</code>创建前：</p>
<blockquote>
<p>This attribute must be set before <a href="https://doc.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html#PySide2.QtGui.QGuiApplication"><code>QGuiApplication</code></a> is constructed. This value was added in Qt 5.6.</p>
</blockquote>
<p>所以接下来就好做了，只需要一行代码即可实现对高分屏的适配：</p>
<p><code>QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)</code></p>
<p>例如：</p>
<pre><code class="language-python"># -*- coding:utf-8 -*-
import sys
from UI import styleBook
from PySide2 import QtCore
from PySide2.QtCore import Qt
from PySide2.QtWidgets import QApplication
from PySide2.QtGui import QIcon
from stqt import mainWindows

if __name__ == '__main__':
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QApplication(sys.argv)
    mainWindow = mainWindows()
    mainWindow.setWindowTitle('Single Table Query Tools')
    mainWindow.setWindowIcon(QIcon('./LOGO.ico'))
    main_qss = styleBook.get_main_style()
    mainWindow.setStyleSheet(main_qss)
    mainWindow.show()
    sys.exit(app.exec_())

</code></pre>
<p>在 app = QApplication 创建前添加即可。</p>
<h2 id="其他建议">其他建议：</h2>
<ol>
<li>推荐图标直接使用 SVG 文件，这样在拉伸中不会导致分辨率问题。</li>
<li>样式写在单独的 QSS 文件中，每一个 Widget 组件都用 <code>px</code> 标示尺寸，这样在放大缩小中都能够很好的按倍数支持。同样文字内容也用 font-size 标注，能够很好的支持。</li>
</ol>
<h2 id="one-more-thing">One More Thing</h2>
<p>这个设置在应用从高分屏切换到低分辨率的时候也能够自动适应。挺方便的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为公众号撰稿—如何精准检索我们公众号的文章]]></title>
        <id>https://hwang.top/post/wei-gong-zhong-hao-zhuan-gao-ru-he-jing-zhun-jian-suo-wo-men-gong-zhong-hao-de-wen-zhang</id>
        <link href="https://hwang.top/post/wei-gong-zhong-hao-zhuan-gao-ru-he-jing-zhun-jian-suo-wo-men-gong-zhong-hao-de-wen-zhang">
        </link>
        <updated>2019-11-03T10:14:06.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>2019.11.03<br>
为刘老师准备的一篇小教程</p>
</blockquote>
<p>在「刘西川文献阅读与写作」的运营中，我们常常在后台收到这样的留言：</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>2019.11.03<br>
为刘老师准备的一篇小教程</p>
</blockquote>
<p>在「刘西川文献阅读与写作」的运营中，我们常常在后台收到这样的留言：</p>
<!-- more -->
<p>这位读者的意图其实很明显——希望查找我们公众平台关于「实证研究」的文章。但是由于我们精力和技术有限，以及微信公众平台本身的限制，并不能实时返还相关的内容。那么如何正确的检索我们公众号的文章呢？</p>
<p>其实微信提供了定向搜索特定微信公众号推文的功能，具体操作如下：</p>
<ol>
<li>打开「刘西川文献阅读与写作」公众号，相信爱学习的你一定已经把我们置顶了（如果没有还不赶快星标我们的公众号）</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://hwang.top/post-images/1572776107730.JPG" alt="" loading="lazy"></figure>
<ol start="2">
<li>点击右上方 头像 按钮 ，即可查看详情</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://hwang.top/post-images/1572776120039.JPG" alt="" loading="lazy"></figure>
<ol start="3">
<li>点击搜索按钮，即可搜索「刘西川文献阅读与写作」下的所有推文啦。</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://hwang.top/post-images/1572776127775.jpg" alt="" loading="lazy"></figure>
<p>如下图：</p>
<figure data-type="image" tabindex="4"><img src="https://hwang.top/post-images/1572776137449.PNG" alt="" loading="lazy"></figure>
<p>甚至是正文内出现关键字都能找到哦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[划重点 ｜ 经济学，学Python 需要学哪些内容？——数据分析处理 化必知必会的知识点]]></title>
        <id>https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-shu-ju-fen-xi-chu-li-hua-bi-zhi-bi-hui-de-zhi-shi-dian</id>
        <link href="https://hwang.top/post/hua-chong-dian-or-jing-ji-xue-xue-python-xu-yao-xue-na-xie-nei-rong-shu-ju-fen-xi-chu-li-hua-bi-zhi-bi-hui-de-zhi-shi-dian">
        </link>
        <updated>2019-11-03T10:09:29.000Z</updated>
        <summary type="html"><![CDATA[<p>也许会有专业软件工程师可以认为 Python 的火热，有些“过誉”了，但是在经济学乃至数据科学领域，Python的火热绝对是能够理解的。任何一个经济学届的「有志青年」，都应该抓住这把火。对于那些还没有上手，有准备上手的「有志青年」们，本文将为大家梳理经济学类学子，学习 Python ，在数据分析处理环节需要用到哪些内容。</p>
]]></summary>
        <content type="html"><![CDATA[<p>也许会有专业软件工程师可以认为 Python 的火热，有些“过誉”了，但是在经济学乃至数据科学领域，Python的火热绝对是能够理解的。任何一个经济学届的「有志青年」，都应该抓住这把火。对于那些还没有上手，有准备上手的「有志青年」们，本文将为大家梳理经济学类学子，学习 Python ，在数据分析处理环节需要用到哪些内容。</p>
<!-- more -->
<p>注：以下知识点主要以 Python 的第三方包为主。</p>
<blockquote>
<p>onePoint<br>
Python的第三方包：Python 具有丰富的扩展性，成千上万的第三方扩展包不断为 Python 赋能，使得其能够承载各式各样的不同需求。一般代码前几行，诸如<code>import pandas as pd</code> ，就是在导入第三方包。得益于开源免费，任何人都可以为其贡献第三包，而许多优秀的第三方包又促进更多的人使用Python，进而创造出更多的第三方包，进而形成一种良性的循环。</p>
</blockquote>
<p>经济学使用 Stata 也好，Python 也好，根本目的是为了对于数据进行分析，从而了解到隐藏在数据背后的“经济解释”。所以数据分析是学完 Python 基础的第一课，也是最重要的一课。</p>
<h3 id="1-pandas-数据操作的基石">1. Pandas ：数据操作的基石</h3>
<p><img src="http://112.17.171.130:10080/FTPshare/20191103155953fnjC.png" alt="" loading="lazy"><br>
毫不过分的说，学好 Pandas 甚至比学好 Python 更重要。可以说，正是因为 Pandas 的好用，奠定了 Python 在数据科学地位。</p>
<p>那么，Pandas  是什么？ Pandas 是 Python 的第三方包，用于数据处理。 Python 默认的数据格式，无论是列表还是字典，都不能很好的用于操作在现实中常见的二维数据。Pandas 为此而生， Pandas 提供了一种名为 DataFrame 的数据格式，将数据储存为一个二维表的形式，再通过各种函数方法，对数据进行横向、纵向、亦或者按条件的切片来对数据进行处理，最终得到需要的数据结果。</p>
<p>Pandas 提供了快速而高效的 DataFrame 对象，用于数据操作与综合索引（索引就是用来快速查找对象的，例如快速找到标示性别的一列）。通过 Pandas 你可以轻松的读取CSV和文本文件、Microsoft Excel、SQL数据库和快速HDF 5格式的数据。并且基于各种索引与标签，你可以轻松的创建数据切片（例如一个数据里标示年纪的切片），通过大数据集筛选特定子集（例如，筛选性别为男性、年龄大于18岁的成人男性样本）。</p>
<p>总结一下，无论是基础的数据操作，还是为日后扩展，Pandas 都是极为基础，极为重要的一款第三方包。</p>
<ul>
<li>GitHub 项目地址👉：<a href="https://github.com/pandas-dev/pandas">https://github.com/pandas-dev/pandas</a></li>
<li>官方文档地址👉：<a href="https://pandas.pydata.org/pandas-docs/stable/">https://pandas.pydata.org/pandas-docs/stable/</a></li>
</ul>
<h3 id="2-numpy为python-提供强劲的运算支持">2. Numpy：为Python 提供强劲的运算支持</h3>
<p><img src="http://112.17.171.130:10080/FTPshare/20191103170116W0Ld.png" alt="" loading="lazy"><br>
Numpy 是 Pandas 的一个依赖项（安装 Pandas 时会自动安装 Numpy），Pandas 的高效率一部分原因就是归功于 Numpy 的强大。</p>
<p>简单理解就是 Numpy 提供了一个比 Python 自带的数组运算更加快速的 Numpy数据的数据格式。当你的分析涉及到数组运算，尤其是多维的数组运算时，那你应当考虑学习使用 Numpy。同时，Numpy也提供了强大的线性代数、傅立叶变换和随机数的功能。</p>
<p>Numpy 是Python 数据处理的又一块基石，在机器学习和深度学习领域，Numpy 具有广泛的应用。所以学习 Numpy 到如何的深度，需要看你所研究的领域，是否需要用到较为高级的数学运算。</p>
<ul>
<li>官方地址👉：<a href="https://numpy.org/">https://numpy.org/</a></li>
<li>官方文档👉：<a href="https://numpy.org/doc/">https://numpy.org/doc/</a></li>
<li>如果你熟悉 Matalab，可以查看：<a href="https://numpy.org/doc/1.17/user/numpy-for-matlab-users.html?highlight=matlab">《与matlab比较》</a>，也可以对照<a href="https://www.numpy.org.cn/user/numpy_for_matlab_users.html#%E4%BB%8B%E7%BB%8D">中文翻译版</a></li>
</ul>
<h3 id="3-statsmodels-将计量搬到python上来">3. Statsmodels： 将计量搬到python上来</h3>
<p>通过 Pandas 进行数据处理，我筛选到了需要的数据，接下来我们经济学的学生需要做什么呢？当然是开始计量之旅喽！</p>
<p>那么我们还需要将数据从 Pandas 的 DataFrame 导出成 CSV，再导入到 Stata 中，进行计量运算嘛？ 大可不必，在 Python 你可以自己手写一个 OLS 函数，然后反复调用即可。(此时可能有读者冒出了大量的 「黑人问号.jpg」)</p>
<p>其实关注本公众号的读者应该已经阅读过：<a href="https://mp.weixin.qq.com/s/Sr8MRQNN5beN9MzLjnZE8Q">工具&amp;方法 | 6行代码教你用python做OLS回归 </a></p>
<figure data-type="image" tabindex="1"><img src="http://112.17.171.130:10080/FTPshare/20191103170130lVDP.png" alt="" loading="lazy"></figure>
<p>是的 Python 当中也有计量库了：Statsmodels 。Statsmodels 是一个Python的第三方模块，他封装了许多计量模型，方便学者直接调用。所谓封装，就相当于 Stata 中一个 reg 命令，代表了最基础的 OLS 回归命令，在Statsmodels 中也有类似 reg 的语句，提供给 OLS 估计。详细的内容可以参考<a href="https://mp.weixin.qq.com/s/Sr8MRQNN5beN9MzLjnZE8Q">工具&amp;方法 | 6行代码教你用python做OLS回归 </a>，以及下面的官方链接。</p>
<p>不得不说，通过 Statsmodels，Python 中做计量的成本大大降低，学习 Python 对于经济学学生来说，也能做到「全栈」式的使用体验。</p>
<ul>
<li>官方地址👉： <a href="https://www.statsmodels.org/stable/index.html">https://www.statsmodels.org/stable/index.html</a></li>
<li>官方示例👉：<a href="https://www.statsmodels.org/stable/examples/index.html">https://www.statsmodels.org/stable/examples/index.html</a></li>
</ul>
<h3 id="4-sqlachemy-or-pymysql-cx_oracle-进阶操作处理-sql-数据库">4 . sqlachemy ( or pymysql、cx_oracle) ：进阶操作，处理 SQL 数据库</h3>
<figure data-type="image" tabindex="2"><img src="http://112.17.171.130:10080/FTPshare/20191103170148Ccue.png" alt="" loading="lazy"></figure>
<p>相比于 Stata ，Python 还可以通过很容易的方式，链接到数据库中，对数据库内的数据进行操作。与经济学关系更为密切的一般是 关系型数据库，即 MySQL、Oracle 为代表的数据库类型。 Python 当中提供了极其便利的方式链接到 以上类型的数据库。通过 pymysql 能够链接到 mysql 数据库，通过 cx_oracle 能够链接到 Oracle 数据库，并且，如果你对 SQL 语句不熟悉，你可以使用 sqlachemy 一类的ORM框架的方式，跳过原生 SQL 语句，通过类似 Pandas 的筛选语句的方式来操作数据库查询，获取需要的数据子集。</p>
<p>经济学对于SQL 数据库的处理，更多时候是在总的大数据集中，筛选出自己需要子集，再进行操作。这个过程，你可以通过 sqlachemy 的方式筛选数据，也可以通过原生sql查询的方式获取数据，再将数据储存为 DataFrame 格式，利用 Pandas 进行精细化的二次处理，再通过上面提到的 Statsmodels 等第三方包进行计量处理。</p>
<ul>
<li>官方地址👉：<a href="https://www.sqlalchemy.org/">https://www.sqlalchemy.org/</a></li>
</ul>
<hr>
<p>至此，小编整理的，经济学学生需要用的数据处理相关的包已经介绍完毕了。简单总结一下，当你拿到数据是 CSV 一类格式的数据时，通过 Pandas 将文件读取为一个 DataFrame，然后对其按需求进行筛选和运算，得到自己需要的数据集。如果数据储存在 SQL 数据库中，通过Python 连接数据库，运用 ORM 框架或者 原生 SQL 语句对数据进行筛选，拿到自己需要子集后，读取到 DataFrame 中，在Pandas中再进行更加精细化的处理，得到真正需要的数据集。这些数据集，依然可以通过 Python 的Statsmodels进行计量，得到计量的结果。至此一个数据处理 Workflow 在 Python 得到完整的体现。</p>
<p>根据本文的阅读的阅读数量和点赞情况，我们会考虑基础推出数据获取（爬虫）、数据可视化的相关内容哦。</p>
<pre><code class="language-sql">做一个投票，投一下希望先做数据获取（爬虫）还是先做数据可视化
</code></pre>
]]></content>
    </entry>
</feed>