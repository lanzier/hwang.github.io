<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hwang.top</id>
    <title>Hwang&apos;s Blog</title>
    <updated>2020-02-07T10:50:11.231Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hwang.top"/>
    <link rel="self" href="https://hwang.top/atom.xml"/>
    <subtitle>欢迎来到 Hwang 的小博客 &lt;br&gt;
这显然不是什么技术博客，也不会有太多值得期待的干货。&lt;br&gt;</subtitle>
    <logo>https://hwang.top/images/avatar.png</logo>
    <icon>https://hwang.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Hwang&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Try-Electron记实（二）— ant-design 的引入、font-awesome 的引入]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-er-ant-design-de-yin-ru-font-awesome-de-yin-ru</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-er-ant-design-de-yin-ru-font-awesome-de-yin-ru">
        </link>
        <updated>2020-02-07T10:47:45.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>简单记录一下；<br>
有一点点的坑是引入 less 的事情，其他都挺顺利的；</p>
</blockquote>
<p>ant-design 和 font-awesome 的引入</p>
<ol>
<li>引入，在 <code>src/main.js</code> 文件内引入：</li>
</ol>
<pre><code class="language-bash">import Vue from 'vue';
import App from './App.vue';
import Antd from 'ant-design-vue';
import 'ant-design-vue/dist/antd.less';
import { library } from '@fortawesome/fontawesome-svg-core'
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'
import {
	【需要的包】
} from '@fortawesome/free-solid-svg-icons'

library.add(
	【需要的包】
)
 
Vue.component('font-awesome-icon', FontAwesomeIcon)

Vue.config.productionTip = false;
Vue.use(Antd);


new Vue({
  render: h =&gt; h(App),
}).$mount('#app')

</code></pre>
<ol start="2">
<li>其中，如果需要配置 ant 的主题</li>
</ol>
<pre><code class="language-bash">	import 'ant-design-vue/dist/antd.less';
	```
	使用 less 配置主题。</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于团队协作工具的理想形态，这是我从飞书上得到的思考]]></title>
        <id>https://hwang.top/post/guan-yu-tuan-dui-xie-zuo-gong-ju-de-li-xiang-xing-tai-zhe-shi-wo-cong-fei-shu-shang-de-dao-de-si-kao</id>
        <link href="https://hwang.top/post/guan-yu-tuan-dui-xie-zuo-gong-ju-de-li-xiang-xing-tai-zhe-shi-wo-cong-fei-shu-shang-de-dao-de-si-kao">
        </link>
        <updated>2020-02-05T08:26:47.000Z</updated>
        <summary type="html"><![CDATA[<p>2017 年底，我加入我们导师的团队，开始创业。当我们人数达到 10 人时，我们也发现了，在微信上沟通工作时，总会出现：</p>
<ol>
<li>沟通记录混乱：用过微信的大家都懂。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<p>2017 年底，我加入我们导师的团队，开始创业。当我们人数达到 10 人时，我们也发现了，在微信上沟通工作时，总会出现：</p>
<ol>
<li>沟通记录混乱：用过微信的大家都懂。</li>
</ol>
<!-- more -->
<ol start="2">
<li>
<p>文件丢失，文件版本混乱：微信并不会负责你的文件存储。</p>
</li>
<li>
<p>共享信息沟通不畅：每当有新人入职时，许多问题需要重复解答。</p>
</li>
<li>
<p>项目管理不畅：各种任务环节很难被监控到。</p>
</li>
</ol>
<p>这些问题频繁出现在前几个月，解决这些问题的任务被安排在了我身上，当时市面上能够选择的产品，主要可以分为「国内系」以及「海外系」。一家企业在日常业务中，普遍需要的，其实就是三大功能，团队沟通、信息资源管理、项目管理。无论是生产、研发还是销售环节，这三大基础需求都是存在的。一家企业根据他所处的领域的不同，企业的组织形式千差万别，对于这「三大基础需求」也是有显著的差异的。</p>
<p>更多内容前往少数派阅读：https://sspai.com/post/58385</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[figma 的一些快捷键]]></title>
        <id>https://hwang.top/post/figma-de-yi-xie-kuai-jie-jian</id>
        <link href="https://hwang.top/post/figma-de-yi-xie-kuai-jie-jian">
        </link>
        <updated>2020-02-05T08:20:53.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>command + option +v 样式全部复制</p>
</li>
<li>
<p>command + 1/2 切换图层和组件库</p>
</li>
<li>
<p>shift + 1/2 放大当前 对象</p>
</li>
<li>
<p>command + option + G 创建 frame //我比较常用的</p>
</li>
<li>
<p>按住 option 从组件库中拖拽出组件，替换组件 / 按住 option + command 保持原有大小</p>
</li>
<li>
<p>option + L 合并图层 （为选中时，收起所有的</p>
</li>
<li>
<p>command+shift+K 批量添加图片</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[疫情]]></title>
        <id>https://hwang.top/post/yi-qing-ji-lu</id>
        <link href="https://hwang.top/post/yi-qing-ji-lu">
        </link>
        <updated>2020-02-02T05:43:43.000Z</updated>
        <content type="html"><![CDATA[<p>2020 这是一段比较难忘的记忆...</p>
<p>这里不会记录更多，但是在我的 Google Photo 里，记录了一切。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try-Electron 记实（一）]]></title>
        <id>https://hwang.top/post/try-electron-ji-shi-yi</id>
        <link href="https://hwang.top/post/try-electron-ji-shi-yi">
        </link>
        <updated>2020-01-21T05:24:27.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>记录一下第一次正式开始写一个 Electron 应用；<br>
基础比较差，几乎没什么基础...</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>记录一下第一次正式开始写一个 Electron 应用；<br>
基础比较差，几乎没什么基础...</p>
</blockquote>
<!-- more -->
<h2 id="开始一个-electron-项目">开始一个 Electron 项目</h2>
<ol>
<li>使用 Vue-cli 3.0 以上，进行项目初始化；</li>
</ol>
<pre><code class="language-bash">vue add electron-builder 
vue create .
</code></pre>
<ol start="2">
<li>运行这个项目：</li>
</ol>
<pre><code class="language-bash">yarn electron:serve
</code></pre>
<p>Done</p>
<h2 id="npm-常用参数记录">npm 常用参数记录</h2>
<p>发现对 npm 的一些参数还不是很熟悉，记录一下；</p>
<ul>
<li>基本的安装/卸载：<pre><code class="language-bash">npm install/uninstall [packegename]
</code></pre>
其中安装这一部分，可选参数：
<ul>
<li><code>--save</code>or <code>-S</code>：添加到<strong>生产环境</strong>的依赖 ;</li>
<li><code>--save-dev</code> or <code>-D</code>：添加到<strong>开发环境</strong>；</li>
<li><code>--save-optional</code> or <code>-O</code>： 添加到可选环境配置 （好像不太常用）；</li>
<li><code>--save-exact</code> or  <code>-E</code> ：指定版本安装模块；</li>
</ul>
</li>
<li>开始项目时一次性安装依赖包<pre><code class="language-bash">npm install
</code></pre>
可选参数：
<ul>
<li><code>--global</code> or <code>-g</code> 全局安装；</li>
</ul>
</li>
<li>卸载部分可选参数与安装时相同
<ul>
<li>卸载还可以使用：<code>npm remove</code> 、<code>npm rm</code>、<code>npm r</code> 、 <code>npm un</code> 、 <code>npm unlink</code>(unlink 与 link 好像是测试的)</li>
</ul>
</li>
<li><code>npm list/ll/la/ls</code> 列出已安装的模块；</li>
<li><code>npm outdated</code> 列出需要更新的模块；</li>
<li><code>npm update</code> 更新依赖包，可选参数 <code>--global</code> or <code>-g</code></li>
<li><code>npm root</code> 查看命令的绝对路径；</li>
<li><code>npm config</code> npm 的配配置</li>
</ul>
<h2 id="yarn-常用参数记录">yarn 常用参数记录</h2>
<p>顺便整理一下 yarn 的一些参数；yarn 用于固定开发中包的各种版本；</p>
<ul>
<li><code>yarn add</code><pre><code class="language-bash">	yarn add [package]@[version]
	```
	添加到生产环境中
- `--dev` or `-D` 安装到生产环境中
- 不常用的：`yarn global add &lt;package...&gt; ` 全局安装；
</code></pre>
</li>
<li><code>yarn cache</code>
<ul>
<li><code>yarn cache dir</code>： 列出当前的 yarn 全局缓存在哪里</li>
<li><code>yarn cache list --pattern &lt;pattern&gt;</code> 列出匹配指定模式的已缓存的包。</li>
<li><code>yarn cache clean</code> 清除全局缓存。</li>
</ul>
</li>
<li><code>yarn list</code>
<ul>
<li>默认情况下，所有包和它们的依赖会被显示。</li>
<li><code>--depth</code> 深度参数</li>
</ul>
</li>
<li><code>yarn remove</code>
<ul>
<li>默认移除依赖，并更新 package.json 和 yarn.lock</li>
</ul>
</li>
<li><code>yarn run</code>
<ul>
<li>运行定义的动作</li>
</ul>
</li>
<li><code>yarn upgrade</code>
<ul>
<li>更新升级包；</li>
</ul>
</li>
<li><code>yarn global bin</code>
<ul>
<li>查看全局安装的目录</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron 初试]]></title>
        <id>https://hwang.top/post/election-chu-shi</id>
        <link href="https://hwang.top/post/election-chu-shi">
        </link>
        <updated>2020-01-05T06:51:33.000Z</updated>
        <summary type="html"><![CDATA[<p>之前做的上传工具，打算用 electron 改做了。原先的使用 Pyside2 写的，软件写起来没什么问题，用起来也很舒服，但是打包的话就相对比较麻烦了，各种坑，Windows 可能还勉强能够应付一下，但是mac 版的资料属实能够找到的资料也不够多。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前做的上传工具，打算用 electron 改做了。原先的使用 Pyside2 写的，软件写起来没什么问题，用起来也很舒服，但是打包的话就相对比较麻烦了，各种坑，Windows 可能还勉强能够应付一下，但是mac 版的资料属实能够找到的资料也不够多。</p>
<!-- more -->
<p>选择前 electron 主要是我司目前是有前端开发的，这样后续产品也能接上。</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1galosj37orj30qc0zcmz2.jpg" alt="" loading="lazy"></figure>
<h2 id="试试-election-的样例">试试 election 的样例</h2>
<p>clone了项目后，直接用：</p>
<pre><code class="language-bash">$ npm install
</code></pre>
<p>结果中间就卡住了，没有继续下载；大概是卡在 core-js 这个包的安装时候。</p>
<p>强制停止，然后删除 node-model 文件，再修改代理：</p>
<pre><code class="language-bash">$ npm config set registry https://registry.npm.taobao.org
</code></pre>
<p>然后在安装：</p>
<pre><code class="language-bash">$ npm install
</code></pre>
<p>嘿，好家伙，直接显示两个包没下。看了下还是 core-js；所以就只能用 cnpm 了。<br>
下载 cnpm：</p>
<pre><code class="language-bash">$ npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre>
<p>然后使用 cnpm：</p>
<pre><code class="language-bash">$ cnpm install
$ cnpm start
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1galosd3plcj312f0u0q87.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 06]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-06</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-06">
        </link>
        <updated>2019-12-29T09:37:24.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
<p><a href="https://ift.tt/2wAchiQ">真正提高效率：自定义你的 Touch Bar</a></p>
<blockquote>
<p>自 2016 年 Touch Bar 在 MacBook Pro 上问世以来，对其最大的争议就是它并不能很好地提高用户的工作效率：Touch Bar 提供的大多数功能很容易使用键盘快捷键来实现，并且有些时候使用快捷键更加方便、符合直觉。</p>
</blockquote>
<p><a href="https://ift.tt/2vu6nnM">聊聊 GFW 如何封杀 Resilio Sync（BTSync）？以及如何【免翻墙】继续使用？</a></p>
<blockquote>
<p>★引子    　　最近一个多月，有好些读者抱怨 Resilio Sync（原名叫做“BitTorrent Sync”，简称“BTsync”）无法正常使用。所以俺一直打算写一篇来谈谈这个事情。顺便也分享一下：如何继续【免翻墙】使用 Resilio Sync。</p>
</blockquote>
<p><a href="https://ift.tt/2shD7uP">第四范式戴文渊：机器写出1000万条以上规则，就超越了专家</a></p>
<blockquote>
<p>为你推送和解读最前沿、最有料的科技创投资讯</p>
</blockquote>
<p><a href="https://ift.tt/2vFF0pi">培养大脑记忆力的第二次机会：「记忆神器」Anki 使用详解</a></p>
<blockquote>
<p>阅读建议：本文基于 Anki for Mac，可以在 Anki 中国 上免费下载；本文涉及众多新概念，建议在 Anki 中国 下载一个共享的牌组，尝试文中提到的一些概念和操作。</p>
</blockquote>
<p><a href="https://ift.tt/2pe0Uxy">用 Ai Search 和 Drafts 实现 Alfred 的搜索体验</a></p>
<blockquote>
<p>这篇文章主要探讨的是一种结合 Ai Search 和 Drafts 进行快速网站搜索的方法。Ai Search 扮演的是一个搜索引擎库，而 Drafts 是提高调用搜索引擎效率的工具。文中方法的关键点在于键盘输入，搜索内容和选择搜索引擎的操作都可以</p>
</blockquote>
<p><a href="https://ift.tt/2mkTdDj">强大如怪物：顶级文本处理应用 Drafts 4 深度评测</a></p>
<blockquote>
<p>虽然此前购买过旧版本的 Drafts，但在拿到手上最新版本的 Drafts 4 前，其实我并没有怎么好好使用它。倒并不是因为它不好用，而是因为它和另外一款相似的应用 Editorial 在我心里一直是两款「怪物」一般的文本输入类应用。因</p>
</blockquote>
<p><a href="https://ift.tt/2OUQnnl">这个在线协作工具，什么都能画</a></p>
<blockquote>
<p>Matrix 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>
</blockquote>
<p><a href="https://ift.tt/2Qj3I80">企业微信3.0发布会，都讲了些什么？</a></p>
<blockquote>
<p>通过邹叔在现场拍的两张照片来看，企业微信最重要的改变就是：从拉新变成沉淀，从2B工具变成了帮助企业2C的工具。</p>
</blockquote>
<p><a href="https://ift.tt/2QiXkhb">克洛普的圣诞致辞：作为最幸运的红军人，这是骄傲难忘的一年</a></p>
<blockquote>
<p>编者按：如往年一样，克洛普在圣诞节当天于利物浦官方发表了他的圣诞致辞，让我们来看看渣叔如何向大家分享这一年的感受。</p>
</blockquote>
<p><a href="https://ift.tt/2PxUqpP">Mac Pro 2019 Teardown</a></p>
<blockquote>
<p>Teardown of the reinvented 2019 Mac Pro, which returns to a properly repairable design that happens to not grate cheese very well. Performed December 2019.</p>
</blockquote>
<p><a href="https://ift.tt/34AWiSX">2019：“暗黑”的一年</a></p>
<blockquote>
<p>昨天，微信开放了安卓平台 7.0.10 版本的内部测试。安装之后，可以看到的一些小变化是多选信息、查看图片、视频等界面的微调。</p>
</blockquote>
<p><a href="https://ift.tt/2S4U9fC">Flypig | 自媒体时代的 “非虚构” 人生</a></p>
<blockquote>
<p>微信号 DAZED_CHINA 功能介绍 《DAZED》杂志官方公众号。微博：@DazedChina 。 Hannah——舌尖后缩，轻触上颚然后落下，H-a-n-n-a-h，倒过来念也是如此。这是电影《降临》（Arrival, 2017）中语言学家Louise女儿的名字，故事的结尾又回到了</p>
</blockquote>
<p><a href="https://ift.tt/2LP8oB7">杭州</a></p>
<blockquote>
<p>杭州是上海边上的一座城，说它“美丽”不足以形容它的风貌，说它“最适合人居住”又会让人误以为它房价便宜，所以很难找出一个词来概括它。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hwang Reading List - New 05]]></title>
        <id>https://hwang.top/post/hwang-reading-list-new-05</id>
        <link href="https://hwang.top/post/hwang-reading-list-new-05">
        </link>
        <updated>2019-12-22T12:31:36.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>最近真就没怎么更新博客...<br>
注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>最近真就没怎么更新博客...<br>
注：链接是 <a href="ifttt.com">IFTTT</a> 生成的，可能需要科学的上网方式，才能够访问</p>
</blockquote>
<!-- more -->
<p><a href="https://ift.tt/2qsSNzG">基于QTdesigner的PyQt编程</a> \</p>
<blockquote>
<p>前面的教程中有讲过对于python自带的Tk模块的使用，实际上个人感觉Tk的使用不仅繁琐，而且做出来的界面并不美观，这里向大家推荐pyqt。 qyqt这个模块的最大优势在于界面可以使用qtdesigner直观的制作，然后代码直接读取就可以</p>
</blockquote>
<p><a href="https://ift.tt/2Na0inF">Kindle 十二岁</a> \</p>
<blockquote>
<p>两个多星期后的十一月十九日，就是 Kindle 的正式十二岁生日。正版电子书发展至今，对于我这种不住在英语国家但要看英文书的人带来了许多便利，但它在排版上依然远远劣于盗版 PDF（即远未达到平面出版的排版水平）。</p>
</blockquote>
<p><a href="https://ift.tt/2rBrG5D">知料 | 越薄越好？噼里啪啦的键盘是怎么成为苹果绊脚石的</a> \</p>
<blockquote>
<p>蝶形键盘失败了，这一苹果曾力推的全新设计，在短暂四年后便狼狈退场。</p>
</blockquote>
<p><a href="https://ift.tt/34tr155">极圈化</a> \</p>
<blockquote>
<p>不知道从什么时候开始，阶层固化、鄙视链定序、圈内刻奇成了舆论热点的源头，这一部分是商业社会价格歧视的结果，一部分是分工后专业化的信息壁垒，另一部分则是本质上人群价值观割裂后产生的信息不对称与隔离。</p>
</blockquote>
<p><a href="https://ift.tt/36l1prv">我推荐的 RSS 订阅列表</a> \</p>
<blockquote>
<p>每次推荐 RSS 阅读器，总有人条件反射地说「现在谁还用那个！」，令人生厌。但另一个条件反射式的反应非常合理：就算我装了 RSS 阅读器，里面一片空白，我该订什么呢？</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派、Windows 设备都可以做你 Mac 的「时间机器」——利用 SMB 协议进行 Time Machine 备份]]></title>
        <id>https://hwang.top/post/shu-mei-pai-windows-she-bei-du-ke-yi-zuo-ni-mac-de-shi-jian-ji-qi-li-yong-smb-xie-yi-jin-xing-time-machine-bei-fen</id>
        <link href="https://hwang.top/post/shu-mei-pai-windows-she-bei-du-ke-yi-zuo-ni-mac-de-shi-jian-ji-qi-li-yong-smb-xie-yi-jin-xing-time-machine-bei-fen">
        </link>
        <updated>2019-12-02T13:56:12.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://sspai.com/post/57539<br>
推荐在少数派阅读</p>
</blockquote>
<p>macOS 为用户提供了便捷的系统备份功能：Time Machine （你可以从少数派2015年的老文中学习使用这个功能：<a href="https://sspai.com/post/30550">Time Machine 使用教程</a> ）。</p>
<p>一般而言，Time Machine 需要你连接一块硬盘到你的 Mac 上才能够启动。当然，你可以通过「有线连接」和「无线连接」的方式，进行备份。有线连接不再赘述，可以参考上面的教程。而无线连接，少数派上同样可以参考：<a href="https://sspai.com/post/48372">把群晖 NAS 变成「时间返回舱」，轻松搞定 Time Machine 无线备份</a>，而本文将介绍除了使用 NAS 以外，你还可以在任何能够使用 SMB 协议的设备上创建你的「时间机器」。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文以发布于少数派：https://sspai.com/post/57539<br>
推荐在少数派阅读</p>
</blockquote>
<p>macOS 为用户提供了便捷的系统备份功能：Time Machine （你可以从少数派2015年的老文中学习使用这个功能：<a href="https://sspai.com/post/30550">Time Machine 使用教程</a> ）。</p>
<p>一般而言，Time Machine 需要你连接一块硬盘到你的 Mac 上才能够启动。当然，你可以通过「有线连接」和「无线连接」的方式，进行备份。有线连接不再赘述，可以参考上面的教程。而无线连接，少数派上同样可以参考：<a href="https://sspai.com/post/48372">把群晖 NAS 变成「时间返回舱」，轻松搞定 Time Machine 无线备份</a>，而本文将介绍除了使用 NAS 以外，你还可以在任何能够使用 SMB 协议的设备上创建你的「时间机器」。</p>
<!-- more -->
<p>首先，SMB 协议是一种能够将本机电脑上的文件夹分享到局域网内其他设备上的一种协议。你可以简单的理解为是一种文件共享的协议。我们要做的就是通过这个协议，将主机上的某个文件共享到你的 Mac 上，然后在那上面创建备份。所以，我们需要的具体步骤就是：1. 通过 SMB 分享一个文件夹； 2. 在 Mac 上加载这个文件夹；3. 利用这个文件夹创建备份。</p>
<h2 id="1-通过-smb-分享一个文件夹">1. 通过 SMB 分享一个文件夹</h2>
<p>这一步，我们需要做的事，具体而言就是：</p>
<ol>
<li>开启 SMB 服务；</li>
<li>配置一个文件夹进行共享；<br>
所以，正如标题里写的，无论是树莓派这种 Linux 设备，还是 Windows 设备，你都可以开启 SMB 服务，进行局域网内的文件的共享。所以，如果你有一台 Linux 设备，你可以参考下面的树莓派的步骤，如果你有一台 Windows 设备，可以参考 Windows 的步骤。</li>
</ol>
<h3 id="树莓派上开启-smb-服务">树莓派上开启 SMB 服务</h3>
<p>详细内容，同样可以参考我派的文章：<a href="https://sspai.com/post/40721">利用 Samba - 像管理本地文件一样处理树莓派文件</a>。<br>
首先，更新源：</p>
<pre><code class="language-bash">$ sudo apt-get update
</code></pre>
<p>第二步，安装 samba 服务：</p>
<pre><code class="language-bash">$ sudo apt-get install samba samba-common-bin
</code></pre>
<p>第三步，修改 SMB 的配置，这里使用 vim 进行编辑：</p>
<pre><code class="language-bash">$ sudo vim /etc/samba/smb.conf
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz0w5huj31040pyjwx.jpg" alt="" loading="lazy"></figure>
<p>在配置文件的最后添加：</p>
<pre><code class="language-bash">[pi]

    path = /home/pi/

    valid users = pi

    browseable = Yes

    writeable = Yes

    writelist = pi

    create mask = 0777

    directory mask = 0777
</code></pre>
<p>保存退出后，重启一下 samba 服务</p>
<pre><code class="language-bash">$ sudo /etc/init.d/samba restart
</code></pre>
<p>最后一步，就是添加 <code>pi</code> 用户为 <code>Samba</code>用户，这一步，会让你设置共享时的密码。</p>
<pre><code class="language-bash">$ sudo smbpasswd -a pi
</code></pre>
<h3 id="windows-上开启-smb-服务">Windows 上开启 SMB 服务</h3>
<p>Windows 上做 Smb 共享会方便很多，首先在一个磁盘空间比较富裕的地方，创建一个文件夹，然后右键，属性，打开「共享」栏：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz1iym9j30rq10ygnz.jpg" alt="" loading="lazy"><br>
然后点击共享，弹出用户设置界面：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz2hyj9j30zc0sw0uj.jpg" alt="" loading="lazy"></p>
<p>设置共享的账户，以及权限设置为「读和写」，一般而言推荐在这里新建一个专门的共享账户，账户和密码就是届时需要在mac上输入的账户和密码：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz3finaj30zk0sijt1.jpg" alt="" loading="lazy"></p>
<p>账户设置完成后，点击「共享」即可：<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz4ezluj30zs0s6gn7.jpg" alt="" loading="lazy"></p>
<p>点击完成，这个文件就已经能够在局域网访问了。这里做个简单的提醒，部分Windows设备的防火墙设置，会禁用共享，可以先通过关闭防火墙的方式来排除是不是防火墙的问题，再通过对应规则的设置，重新开启防火墙即可。</p>
<h2 id="2-在-mac-上加载这个文件夹">2. 在 Mac 上加载这个文件夹</h2>
<p>这个时候，打开你的 finder，应该能够在「位置这一栏」下看到树莓派，或者你的 Windows 设备的名字了。点击后，就能看到你共享的文件夹了。</p>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz5b6e2j31ca0u0n9m.jpg" alt="" loading="lazy"></figure>
<p>如果没有看到，那么通过右键 finder 图标，点击「连接服务器」，输入：<code>smb://设备的IP地址/共享的文件夹名称</code> 的方式连接，在输入账号密码后，也能够连接上这个文件夹。正确连接后，就说明，其他设备上的硬盘，已经能够为你的 Mac 所用了。</p>
<p>接下来我们就要进行最后一个步骤，创建一个「时间机器」了！</p>
<h2 id="3-利用这个文件夹创建备份">3. 利用这个文件夹创建备份</h2>
<p>当你兴奋的打开你的 Time Machine 设置，点击「选择备份磁盘」时，看到却是：</p>
<p><img src="%E6%88%AA%E5%B1%8F2019-11-18%E4%B8%8A%E5%8D%889.09.15.png" alt="" loading="lazy"><br>
<em>是的，并没有你想要的那个文件夹</em></p>
<p>接下来，我们要做的，其实是创建一个磁盘镜像文件，然后将这个磁盘镜像文件挂载到你的 Mac 上，作为一个「虚拟硬盘」，然后利用这个「虚拟硬盘」进行备份。具体的：</p>
<h3 id="31-创建一个空白映像">3.1 创建一个空白映像：</h3>
<p>打开「磁盘工具」，选择菜单栏中的 「新建映像」，选择「空白映像…」，然后如图所示，填入信息：<br>
<img src="%E6%88%AA%E5%B1%8F2019-11-23%E4%B8%8B%E5%8D%885.31.56.png" alt="" loading="lazy"><br>
其中「大小」可以根据你实际需求来填写<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p>
<h3 id="32-将此这个空白映像拷贝到你的-smb-共享文件夹中">3.2 将此这个空白映像拷贝到你的 SMB 共享文件夹中：</h3>
<p>在 finder 中先推出这个磁盘，然后在保存的位置中，将这个磁盘文件拖入 SMB 共享文件夹的对应位置：</p>
<h3 id="33-挂载这个磁盘">3.3 挂载这个磁盘</h3>
<p>双击在 SMB 共享文件夹中的这个映像文件，然后他就会挂在在你的 Mac 上：</p>
<figure data-type="image" tabindex="3"><img src="%E6%88%AA%E5%B1%8F2019-11-23%E4%B8%8B%E5%8D%885.39.50.png" alt="" loading="lazy"></figure>
<p>最后，通过 terminal 将这个磁盘设置为 TimeMachine 的备份磁盘：</p>
<pre><code class="language-bash">$sudo tmutil setdestination /Volumes/TimeMachine
</code></pre>
<p>这里的 <code>/Volumes/TimeMachine</code> 就是这个磁盘的挂载点，一般而言就是 <code>/Volumes/</code> + 磁盘的名称，如果你不是很确定，可以在磁盘工具中，选择这个磁盘，点击右键，选择「显示简介」，看到挂载信息：<br>
<img src="%E6%88%AA%E5%B1%8F2019-11-23%E4%B8%8B%E5%8D%885.44.41.png" alt="" loading="lazy"></p>
<p>输入完命令后，再输入你的Mac密码，即可成功挂载。当你再次打开 TimeMachine 时，已经可以开始备份了。</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ipz69tdej316e0u0dsk.jpg" alt="" loading="lazy"></figure>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>一个400GB的空白磁盘映像，大概有400MB <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker-compose 的使用（一）]]></title>
        <id>https://hwang.top/post/docker-compose-de-shi-yong-yi</id>
        <link href="https://hwang.top/post/docker-compose-de-shi-yong-yi">
        </link>
        <updated>2019-12-02T13:45:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文件目录">文件目录</h2>
<p>在一个 文件夹下，我这里是 Docker</p>
<pre><code class="language-bash">├── docker-compose.yml
├── gitlab
└── nginx
    └── conf.d
</code></pre>
<p>其中 <code>gitlab</code>，是直接在shell脚本中运行的，不是使用 <code>docker-compose</code>的方式进行管理的，就以启动一个 nginx 为例：</p>
<pre><code class="language-yaml">version: '3.4' #版本号
services:
  web:
    image: nginx
    container_name: web_nginx
    restart: always
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - 80:80
</code></pre>
<p>一般来说一份标准配置文件应该包含 version、services、networks （可选）、volumes（可选）</p>
<h3 id="首先是-version">首先是 Version</h3>
<p>Version 3 支持多机和单机，而2仅支持单机。版本1已经废弃了。推荐直接用3及以上版本</p>
<h3 id="其次是-services">其次是 Services</h3>
<p>就是服务主体，这里设置了一个 nignx ，名称是 web，然后 是声明 <code>image</code> 是 nginx，这个<code>image</code> 通过 <code>docker pull nginx</code>拉取。接着是 <code>container_name</code>，定义这个容器名称，这样方便通过docker 命令进行直接的管理，然后是 <code>restart:always</code>，表明自动重启。之后是 <code>volumns</code> 相当于docker 命令中的<code>-v</code>参数，用于做容器内的和宿主机的映射。最后是 <code>ports</code> ，端口映射。这样就OK了。</p>
<h2 id="利用-docker-compose-进行管理">利用 docker-compose 进行管理</h2>
<p>通过以下命令运行：</p>
<pre><code class="language-yaml">$ docker-compose up -d 
</code></pre>
<p>其中 <code>-d</code> 表示在后台运行。</p>
<p>如果需要重启服务可以通过：</p>
<pre><code class="language-yaml">$ docker-compose restart web
</code></pre>
<p>这里的<code>web</code> 就是 services 的名称。</p>
]]></content>
    </entry>
</feed>